{
  "vid": "2a86f45a-fc3c-11e8-a414-00155d006b02",
  "topic": "node.js -- multiple vulnerabilities",
  "description": "\n\t\u003cp\u003eNode.js reports:\u003c/p\u003e\n\t\u003cblockquote cite=\"https://nodejs.org/en/blog/vulnerability/november-2018-security-releases/\"\u003e\n\t  \u003cp\u003eUpdates are now available for all active Node.js release lines. These include fixes for the vulnerabilities identified in the initial announcement. They also include upgrades of Node.js 6 and 8 to OpenSSL 1.0.2q, and upgrades of Node.js 10 and 11 to OpenSSL 1.1.0j.\u003c/p\u003e\n\t  \u003cp\u003eWe recommend that all Node.js users upgrade to a version listed below as soon as possible.\u003c/p\u003e\n\t  \u003ch1\u003eDebugger port 5858 listens on any interface by default (CVE-2018-12120)\u003c/h1\u003e\n\t  \u003cp\u003eAll versions of Node.js 6 are vulnerable and the severity is HIGH. When the debugger is enabled with \u003ccode\u003enode --debug\u003c/code\u003e or \u003ccode\u003enode debug\u003c/code\u003e, it listens to port 5858 on all interfaces by default. This may allow remote computers to attach to the debug port and evaluate arbitrary JavaScript. The default interface is now localhost. It has always been possible to start the debugger on a specific interface, such as \u003ccode\u003enode --debug=localhost\u003c/code\u003e. The debugger was removed in Node.js 8 and replaced with the inspector, so no versions from 8 and later are vulnerable.\u003c/p\u003e\n\t  \u003ch1\u003eDenial of Service with large HTTP headers (CVE-2018-12121)\u003c/h1\u003e\n\t  \u003cp\u003eAll versions of 6 and later are vulnerable and the severity is HIGH. By using a combination of many requests with maximum sized headers (almost 80 KB per connection), and carefully timed completion of the headers, it is possible to cause the HTTP server to abort from heap allocation failure. Attack potential is mitigated by the use of a load balancer or other proxy layer.\u003c/p\u003e\n\t  \u003cp\u003eThe total size of HTTP headers received by Node.js now must not exceed 8192 bytes.\u003c/p\u003e\n\t  \u003ch1\u003e\"Slowloris\" HTTP Denial of Service (CVE-2018-12122)\u003c/h1\u003e\n\t  \u003cp\u003eAll versions of Node.js 6 and later are vulnerable and the severity is LOW. An attacker can cause a Denial of Service (DoS) by sending headers very slowly keeping HTTP or HTTPS connections and associated resources alive for a long period of time. Attack potential is mitigated by the use of a load balancer or other proxy layer.\u003c/p\u003e\n\t  \u003cp\u003eA timeout of 40 seconds now applies to servers receiving HTTP headers. This value can be adjusted with \u003ccode\u003eserver.headersTimeout\u003c/code\u003e. Where headers are not completely received within this period, the socket is destroyed on the next received chunk. In conjunction with \u003ccode\u003eserver.setTimeout()\u003c/code\u003e, this aids in protecting against excessive resource retention and possible Denial of Service.\u003c/p\u003e\n\t  \u003ch1\u003eHostname spoofing in URL parser for javascript protocol (CVE-2018-12123)\u003c/h1\u003e\n\t  \u003cp\u003eAll versions of Node.js 6 and later are vulnerable and the severity is LOW. If a Node.js application is using \u003ccode\u003eurl.parse()\u003c/code\u003e to determine the URL hostname, that hostname can be spoofed by using a mixed case \"javascript:\" (e.g. \"javAscript:\") protocol (other protocols are not affected). If security decisions are made about the URL based on the hostname, they may be incorrect.\u003c/p\u003e\n\t  \u003ch1\u003eHTTP request splitting (CVE-2018-12116)\u003c/h1\u003e\n\t  \u003cp\u003eNode.js 6 and 8 are vulnerable and the severity is MEDIUM. If Node.js can be convinced to use unsanitized user-provided Unicode data for the \u003ccode\u003epath\u003c/code\u003e option of an HTTP request, then data can be provided which will trigger a second, unexpected, and user-defined HTTP request to made to the same server.\u003c/p\u003e\n\t  \u003ch1\u003eOpenSSL Timing vulnerability in ECDSA signature generation (CVE-2018-0735)\u003c/h1\u003e\n\t  \u003cp\u003eThe OpenSSL ECDSA signature algorithm has been shown to be vulnerable to a timing side-channel attack. An attacker could use variations in the signing algorithm to recover the private key.\u003c/p\u003e\n\t  \u003ch1\u003eOpenSSL Timing vulnerability in DSA signature generation (CVE-2018-0734)\u003c/h1\u003e\n\t  \u003cp\u003eThe OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing side-channel attack. An attacker could use variations in the signing algorithm to recover the private key.\u003c/p\u003e\n\t  \u003ch1\u003eOpenSSL Microarchitecture timing vulnerability in ECC scalar multiplication (CVE-2018-5407)\u003c/h1\u003e\n\t  \u003cp\u003eOpenSSL ECC scalar multiplication, used in e.g. ECDSA and ECDH, has been shown to be vulnerable to a microarchitecture timing side-channel attack. An attacker with sufficient access to mount local timing attacks during ECDSA signature generation could recover the private key.\u003c/p\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "node6",
      "range": [
        {
          "lt": "6.15.0"
        }
      ]
    },
    {
      "name": "node8",
      "range": [
        {
          "lt": "8.14.0"
        }
      ]
    },
    {
      "name": "node10",
      "range": [
        {
          "lt": "10.14.0"
        }
      ]
    },
    {
      "name": "node",
      "range": [
        {
          "lt": "11.3.0"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2018-11-27T00:00:00Z",
    "entry": "2018-12-10T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "https://nodejs.org/en/blog/vulnerability/november-2018-security-releases/"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-12120"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-12121"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-12122"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-12123"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-12116"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-0735"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-0734"
    },
    {
      "source": "CVE",
      "text": "CVE-2018-5407"
    }
  ]
}
