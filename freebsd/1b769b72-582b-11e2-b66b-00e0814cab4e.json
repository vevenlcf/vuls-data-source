{
  "vid": "1b769b72-582b-11e2-b66b-00e0814cab4e",
  "topic": "django -- multiple vulnerabilities",
  "description": "\n\t\u003cp\u003eThe Django Project reports:\u003c/p\u003e\n\t\u003cblockquote cite=\"https://www.djangoproject.com/weblog/2012/dec/10/security/\"\u003e\n\t\u003col\u003e\n\t  \u003cli\u003e\n\t  \u003cp\u003eHost header poisoning\u003c/p\u003e\n\t  \u003cp\u003eSeveral earlier Django security releases focused on the issue of\n\t      poisoning the HTTP Host header, causing Django to generate URLs\n\t      pointing to arbitrary, potentially-malicious domains.\u003c/p\u003e\n\t  \u003cp\u003eIn response to further input received and reports of continuing\n\t      issues following the previous release, we're taking additional\n\t      steps to tighten Host header validation. Rather than attempt to\n\t      accommodate all features HTTP supports here, Django's Host header\n\t      validation attempts to support a smaller, but far more common, subset:\u003c/p\u003e\n\t    \u003cul\u003e\n\t\t\u003cli\u003eHostnames must consist of characters [A-Za-z0-9] plus hyphen\n\t\t    ('-') or dot ('.').\u003c/li\u003e\n\t\t\u003cli\u003eIP addresses -- both IPv4 and IPv6 -- are permitted.\u003c/li\u003e\n\t\t\u003cli\u003ePort, if specified, is numeric.\u003c/li\u003e\n\t    \u003c/ul\u003e\n\t  \u003cp\u003eAny deviation from this will now be rejected, raising the exception\n\t      django.core.exceptions.SuspiciousOperation.\u003c/p\u003e\n\t  \u003c/li\u003e\n\t  \u003cli\u003e\n\t  \u003cp\u003eRedirect poisoning\u003c/p\u003e\n\t  \u003cp\u003eAlso following up on a previous issue: in July of this year, we made\n\t      changes to Django's HTTP redirect classes, performing additional\n\t      validation of the scheme of the URL to redirect to (since, both\n\t      within Django's own supplied applications and many third-party\n\t      applications, accepting a user-supplied redirect target is a common\n\t      pattern).\u003c/p\u003e\n\t  \u003cp\u003eSince then, two independent audits of the code turned up further\n\t      potential problems. So, similar to the Host-header issue, we are\n\t      taking steps to provide tighter validation in response to reported\n\t      problems (primarily with third-party applications, but to a certain\n\t      extent also within Django itself). This comes in two parts:\u003c/p\u003e\n\t    \u003col\u003e\n\t\t\u003cli\u003eA new utility function, django.utils.http.is_safe_url, is\n\t\t    added; this function takes a URL and a hostname, and checks\n\t\t    that the URL is either relative, or if absolute matches the\n\t\t    supplied hostname. This function is intended for use whenever\n\t\t    user-supplied redirect targets are accepted, to ensure that\n\t\t    such redirects cannot lead to arbitrary third-party sites.\u003c/li\u003e\n\t\t\u003cli\u003eAll of Django's own built-in views -- primarily in the\n\t\t    authentication system -- which allow user-supplied redirect\n\t\t    targets now use is_safe_url to validate the supplied URL.\u003c/li\u003e\n\t    \u003c/ol\u003e\n\t  \u003c/li\u003e\n\t  \u003c/ol\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "django",
      "range": [
        {
          "lt": "1.4.3"
        }
      ]
    },
    {
      "name": "django13",
      "range": [
        {
          "lt": "1.3.5"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2012-12-10T00:00:00Z",
    "entry": "2013-01-06T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "https://www.djangoproject.com/weblog/2012/dec/10/security/"
    }
  ]
}
