{
  "vid": "f45c0049-be72-11e1-a284-0023ae8e59f0",
  "topic": "pycrypto -- vulnerable ElGamal key generation",
  "description": "\n\t\u003cp\u003eDwayne C. Litzenberger of PyCrypto reports:\u003c/p\u003e\n\t\u003cblockquote cite=\"http://lists.dlitz.net/pipermail/pycrypto/2012q2/000587.html\"\u003e\n\t  \u003cp\u003eIn the ElGamal schemes (for both encryption and signatures), g is\n\t     supposed to be the generator of the entire Z^*_p group.  However, in\n\t     PyCrypto 2.5 and earlier, g is more simply the generator of a random\n\t     sub-group of Z^*_p.\u003c/p\u003e\n\t  \u003cp\u003eThe result is that the signature space (when the key is used for\n\t     signing) or the public key space (when the key is used for encryption)\n\t     may be greatly reduced from its expected size of log(p) bits, possibly\n\t     down to 1 bit (the worst case if the order of g is 2).\u003c/p\u003e\n\t  \u003cp\u003eWhile it has not been confirmed, it has also been suggested that an\n\t     attacker might be able to use this fact to determine the private key.\u003c/p\u003e\n\t  \u003cp\u003eAnyone using ElGamal keys should generate new keys as soon as\n\t     practical.\u003c/p\u003e\n\t  \u003cp\u003eAny additional information about this bug will be tracked at\n\t     https://bugs.launchpad.net/pycrypto/+bug/985164\u003c/p\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "py-pycrypto",
      "range": [
        {
          "lt": "2.6",
          "ge": "2.5"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2012-05-24T00:00:00Z",
    "entry": "2012-06-24T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "http://lists.dlitz.net/pipermail/pycrypto/2012q2/000587.html"
    },
    {
      "source": "URL",
      "text": "https://bugs.launchpad.net/pycrypto/+bug/985164"
    },
    {
      "source": "CVE",
      "text": "CVE-2012-2417"
    }
  ]
}
