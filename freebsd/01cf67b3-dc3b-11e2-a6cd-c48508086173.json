{
  "vid": "01cf67b3-dc3b-11e2-a6cd-c48508086173",
  "topic": "cURL library -- heap corruption in curl_easy_unescape",
  "description": "\n\t\u003cp\u003ecURL developers report:\u003c/p\u003e\n\t\u003cblockquote cite=\"http://curl.haxx.se/docs/adv_20130622.html\"\u003e\n\t  \u003cp\u003elibcurl is vulnerable to a case of bad checking of the\n\t    input data which may lead to heap corruption.\u003c/p\u003e\n\t  \u003cp\u003eThe function curl_easy_unescape() decodes URL-encoded\n\t    strings to raw binary data. URL-encoded octets are\n\t    represented with %HH combinations where HH is a two-digit\n\t    hexadecimal number.  The decoded string is written to an\n\t    allocated memory area that the function returns to the\n\t    caller.\u003c/p\u003e\n\t  \u003cp\u003eThe function takes a source string and a length\n\t    parameter, and if the length provided is 0 the function will\n\t    instead use strlen() to figure out how much data to\n\t    parse.\u003c/p\u003e\n\t  \u003cp\u003eThe \"%HH\" parser wrongly only considered the case where a\n\t    zero byte would terminate the input.  If a length-limited\n\t    buffer was passed in which ended with a '%' character which\n\t    was followed by two hexadecimal digits outside of the buffer\n\t    libcurl was allowed to parse alas without a terminating\n\t    zero, libcurl would still parse that sequence as well.  The\n\t    counter for remaining data to handle would then be decreased\n\t    too much and wrap to become a very large integer and the\n\t    copying would go on too long and the destination buffer that\n\t    is allocated on the heap would get overwritten.\u003c/p\u003e\n\t  \u003cp\u003eWe consider it unlikely that programs allow user-provided\n\t    strings unfiltered into this function.  Also, only the not\n\t    zero-terminated input string use case is affected by this\n\t    flaw.  Exploiting this flaw for gain is probably possible for\n\t    specific circumstances but we consider the general risk for\n\t    this to be low.\u003c/p\u003e\n\t  \u003cp\u003eThe curl command line tool is not affected by this\n\t    problem as it doesn't use this function.\u003c/p\u003e\n\t  \u003cp\u003eThere are no known exploits available at this time.\u003c/p\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "curl",
      "range": [
        {
          "lt": "7.24.0_4",
          "ge": "7.7"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2013-06-22T00:00:00Z",
    "entry": "2013-06-23T00:00:00Z",
    "modified": "2013-07-01T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "http://curl.haxx.se/docs/adv_20130622.html"
    },
    {
      "source": "CVE",
      "text": "CVE-2013-2174"
    }
  ]
}
