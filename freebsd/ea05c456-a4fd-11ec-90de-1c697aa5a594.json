{
  "vid": "ea05c456-a4fd-11ec-90de-1c697aa5a594",
  "topic": "OpenSSL -- Infinite loop in BN_mod_sqrt parsing certificates",
  "description": "\n\t\u003cp\u003eThe OpenSSL project reports:\u003c/p\u003e\n\t\u003cblockquote cite=\"https://www.openssl.org/news/secadv/20220315.txt\"\u003e\n\t\u003cp\u003eInfinite loop in BN_mod_sqrt() reachable when parsing certificates\n\t  (High)\u003c/p\u003e\n\t\u003cp\u003eThe BN_mod_sqrt() function, which computes a modular square root,\n\t  contains a bug that can cause it to loop forever for non-prime\n\t  moduli.\u003c/p\u003e\n\t\u003cp\u003eInternally this function is used when parsing certificates that\n\t  contain elliptic curve public keys in compressed form or explicit\n\t  elliptic curve parameters with a base point encoded in compressed\n\t  form.\u003c/p\u003e\n\t\u003cp\u003eIt is possible to trigger the infinite loop by crafting a\n\t  certificate that has invalid explicit curve parameters.\u003c/p\u003e\n\t\u003cp\u003eSince certificate parsing happens prior to verification of the\n\t  certificate signature, any process that parses an externally\n\t  supplied certificate may thus be subject to a denial of service\n\t  attack. The infinite loop can also be reached when parsing crafted\n\t  private keys as they can contain explicit elliptic curve\n\t  parameters.\u003c/p\u003e\n\t\u003cp\u003eThus vulnerable situations include:\u003c/p\u003e\n\t\u003cul\u003e\n\t  \u003cli\u003eTLS clients consuming server certificates\u003c/li\u003e\n\t  \u003cli\u003eTLS servers consuming client certificates\u003c/li\u003e\n\t  \u003cli\u003eHosting providers taking certificates or private keys from\n\t    customers\u003c/li\u003e\n\t  \u003cli\u003eCertificate authorities parsing certification requests from\n\t    subscribers\u003c/li\u003e\n\t  \u003cli\u003eAnything else which parses ASN.1 elliptic curve parameters\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003cp\u003eAlso any other applications that use the BN_mod_sqrt() where the\n\t  attacker can control the parameter values are vulnerable to this DoS\n\t  issue.\u003c/p\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "openssl",
      "range": [
        {
          "lt": "1.1.1n,1"
        }
      ]
    },
    {
      "name": "openssl-devel",
      "range": [
        {
          "lt": "3.0.2"
        }
      ]
    },
    {
      "name": "openssl-quictls",
      "range": [
        {
          "lt": "3.0.2"
        }
      ]
    },
    {
      "name": "libressl",
      "range": [
        {
          "lt": "3.4.3"
        }
      ]
    },
    {
      "name": "libressl-devel",
      "range": [
        {
          "lt": "3.5.1"
        }
      ]
    },
    {
      "name": "FreeBSD",
      "range": [
        {
          "lt": "13.0_8",
          "ge": "13.0"
        },
        {
          "lt": "12.3_3",
          "ge": "12.3"
        },
        {
          "lt": "12.2_14",
          "ge": "12.2"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2022-03-15T00:00:00Z",
    "entry": "2022-03-16T00:00:00Z",
    "modified": "2022-03-16T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "https://www.openssl.org/news/secadv/20220315.txt"
    },
    {
      "source": "CVE",
      "text": "CVE-2022-0778"
    },
    {
      "source": "FreebsdSA",
      "text": "SA-22:03.openssl"
    }
  ]
}
