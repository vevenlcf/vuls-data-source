{
  "vid": "6e65dfea-b614-11e9-a3a2-1506e15611cc",
  "topic": "Django -- multiple vulnerabilities",
  "description": "\n\t\u003cp\u003eDjango release notes:\u003c/p\u003e\n\t\u003cblockquote cite=\"https://docs.djangoproject.com/en/1.11/releases/1.11.23/\"\u003e\n\t  \u003cp\u003eCVE-2019-14232: Denial-of-service possibility in\n\t    django.utils.text.Truncator\u003c/p\u003e\n\t  \u003cp\u003eIf django.utils.text.Truncator's chars() and words() methods were\n\t    passed the html=True argument, they were extremely slow to evaluate\n\t    certain inputs due to a catastrophic backtracking vulnerability in a\n\t    regular expression. The chars() and words() methods are used to\n\t    implement the truncatechars_html and truncatewords_html template\n\t    filters, which were thus vulnerable\u003c/p\u003e\n\t  \u003cp\u003eThe regular expressions used by Truncator have been simplified in\n\t    order to avoid potential backtracking issues. As a consequence, trailing\n\t    punctuation may now at times be included in the truncated output.\u003c/p\u003e\n\t  \u003cp\u003eCVE-2019-14233: Denial-of-service possibility in strip_tags()\u003c/p\u003e\n\t  \u003cp\u003eDue to the behavior of the underlying HTMLParser,\n\t    django.utils.html.strip_tags() would be extremely slow to evaluate\n\t    certain inputs containing large sequences of nested incomplete HTML\n\t    entities. The strip_tags() method is used to implement the corresponding\n\t    striptags template filter, which was thus also vulnerable.\u003c/p\u003e\n\t  \u003cp\u003estrip_tags() now avoids recursive calls to HTMLParser when progress\n\t    removing tags, but necessarily incomplete HTML entities, stops being\n\t    made.\u003c/p\u003e\n\t  \u003cp\u003eRemember that absolutely NO guarantee is provided about the results of\n\t    strip_tags() being HTML safe. So NEVER mark safe the result of a\n\t    strip_tags() call without escaping it first, for example with\n\t    django.utils.html.escape().\u003c/p\u003e\n\t  \u003cp\u003eCVE-2019-14234: SQL injection possibility in key and index lookups for\n\t    JSONField/HStoreField\u003c/p\u003e\n\t  \u003cp\u003eKey and index lookups for JSONField and key lookups for HStoreField\n\t    were subject to SQL injection, using a suitably crafted dictionary,\n\t    with dictionary expansion, as the **kwargs passed to QuerySet.filter().\u003c/p\u003e\n\t  \u003cp\u003eCVE-2019-14235: Potential memory exhaustion in\n\t    django.utils.encoding.uri_to_iri()\u003c/p\u003e\n\t  \u003cp\u003eIf passed certain inputs, django.utils.encoding.uri_to_iri() could lead\n\t    to significant memory usage due to excessive recursion when\n\t    re-percent-encoding invalid UTF-8 octet sequences.\u003c/p\u003e\n\t  \u003cp\u003euri_to_iri() now avoids recursion when re-percent-encoding invalid\n\t    UTF-8 octet sequences.\u003c/p\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "py27-django111",
      "range": [
        {
          "lt": "1.11.23"
        }
      ]
    },
    {
      "name": "py35-django111",
      "range": [
        {
          "lt": "1.11.23"
        }
      ]
    },
    {
      "name": "py36-django111",
      "range": [
        {
          "lt": "1.11.23"
        }
      ]
    },
    {
      "name": "py37-django111",
      "range": [
        {
          "lt": "1.11.23"
        }
      ]
    },
    {
      "name": "py27-django21",
      "range": [
        {
          "lt": "2.1.11"
        }
      ]
    },
    {
      "name": "py35-django21",
      "range": [
        {
          "lt": "2.1.11"
        }
      ]
    },
    {
      "name": "py36-django21",
      "range": [
        {
          "lt": "2.1.11"
        }
      ]
    },
    {
      "name": "py37-django21",
      "range": [
        {
          "lt": "2.1.11"
        }
      ]
    },
    {
      "name": "py27-django22",
      "range": [
        {
          "lt": "2.2.4"
        }
      ]
    },
    {
      "name": "py35-django22",
      "range": [
        {
          "lt": "2.2.4"
        }
      ]
    },
    {
      "name": "py36-django22",
      "range": [
        {
          "lt": "2.2.4"
        }
      ]
    },
    {
      "name": "py37-django22",
      "range": [
        {
          "lt": "2.2.4"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2019-08-01T00:00:00Z",
    "entry": "2019-08-03T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "https://docs.djangoproject.com/en/1.11/releases/1.11.23/"
    },
    {
      "source": "URL",
      "text": "https://docs.djangoproject.com/en/2.1/releases/2.1.11/"
    },
    {
      "source": "URL",
      "text": "https://docs.djangoproject.com/en/2.2/releases/2.2.4/"
    },
    {
      "source": "CVE",
      "text": "CVE-2019-14232"
    },
    {
      "source": "CVE",
      "text": "CVE-2019-14233"
    },
    {
      "source": "CVE",
      "text": "CVE-2019-14234"
    },
    {
      "source": "CVE",
      "text": "CVE-2019-14235"
    }
  ]
}
