{
  "vid": "2a093853-2495-11e2-b0c7-000d601460a4",
  "topic": "ruby -- $SAFE escaping vulnerability about Exception#to_s/NameError#to_s",
  "description": "\n\t\u003cp\u003eThe official ruby site reports:\u003c/p\u003e\n\t\u003cblockquote cite=\"http://www.ruby-lang.org/en/news/2012/10/12/cve-2012-4464-cve-2012-4466/\"\u003e\n\t  \u003cp\u003eVulnerabilities found for Exception#to_s, NameError#to_s, and\n\t    name_err_mesg_to_s() which is Ruby interpreter-internal API. A\n\t    malicious user code can bypass $SAFE check by utilizing one of\n\t    those security holes.\u003c/p\u003e\n\t  \u003cp\u003eRuby's $SAFE mechanism enables untrusted user codes to run in\n\t    $SAFE \u0026gt;= 4 mode. This is a kind of sandboxing so some operations\n\t    are restricted in that mode to protect other data outside the\n\t    sandbox.\u003c/p\u003e\n\t  \u003cp\u003eThe problem found was around this mechanism. Exception#to_s,\n\t    NameError#to_s, and name_err_mesg_to_s() interpreter-internal API\n\t    was not correctly handling the $SAFE bits so a String object which\n\t    is not tainted can destructively be marked as tainted using them.\n\t    By using this an untrusted code in a sandbox can modify a\n\t    formerly-untainted string destructively.\u003c/p\u003e\n\t  \u003cp\u003eRuby 1.8 once had a similar security issue. It fixed\n\t    Exception#to_s and NameError#to_s, but name_err_mesg_to_str() issue\n\t    survived previous security fix\u003c/p\u003e\n\t\u003c/blockquote\u003e\n      ",
  "affects": [
    {
      "name": "ruby",
      "range": [
        {
          "lt": "1.8.7.371,1",
          "gt": "1.8.7,1"
        },
        {
          "lt": "1.9.3.286,1",
          "gt": "1.9.3,1"
        }
      ]
    }
  ],
  "dates": {
    "discovery": "2012-08-21T00:00:00Z",
    "entry": "2012-11-01T00:00:00Z"
  },
  "references": [
    {
      "source": "URL",
      "text": "http://www.ruby-lang.org/en/news/2012/10/12/cve-2012-4464-cve-2012-4466/"
    },
    {
      "source": "URL",
      "text": "https://access.redhat.com/security/cve/CVE-2012-4464/"
    },
    {
      "source": "CVE",
      "text": "CVE-2012-4464"
    },
    {
      "source": "CVE",
      "text": "CVE-2012-4466"
    }
  ]
}
