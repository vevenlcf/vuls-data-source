{
  "id": "577",
  "name": "EJB Bad Practices: Use of Sockets",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "The program violates the Enterprise JavaBeans (EJB) specification by using sockets.",
  "extended_description": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: \"An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast.\" The specification justifies this requirement in the following way: \"The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.\"",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "573",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "Java"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Quality Degradation"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "Do not use Sockets when writing EJBs."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eThe following Java example is a simple stateless Enterprise JavaBean that retrieves stock symbols and stock values. The Enterprise JavaBean creates a socket and listens for and accepts connections from clients on the socket.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003e@Stateless\u003cxhtml:br/\u003epublic class StockSymbolBean implements StockSymbolRemote {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003e\n                           \u003cxhtml:br/\u003eServerSocket serverSocket = null;\u003cxhtml:br/\u003eSocket clientSocket = null;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic StockSymbolBean() {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003etry {\u003cxhtml:div style=\"margin-left:10px;\"\u003eserverSocket = new ServerSocket(Constants.SOCKET_PORT);\u003c/xhtml:div\u003e} catch (IOException ex) {...}\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003etry {\u003cxhtml:div style=\"margin-left:10px;\"\u003eclientSocket = serverSocket.accept();\u003c/xhtml:div\u003e} catch (IOException e) {...}\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic String getStockSymbol(String name) {...}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic BigDecimal getStockValue(String symbol) {...}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eprivate void processClientInputFromSocket() {...}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eAnd the following Java example is similar to the previous example but demonstrates the use of multicast socket connections within an Enterprise JavaBean.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003e@Stateless\u003cxhtml:br/\u003epublic class StockSymbolBean extends Thread implements StockSymbolRemote {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003e\n                           \u003cxhtml:br/\u003eServerSocket serverSocket = null;\u003cxhtml:br/\u003eSocket clientSocket = null;\u003cxhtml:br/\u003eboolean listening = false;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic StockSymbolBean() {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003etry {\u003cxhtml:div style=\"margin-left:10px;\"\u003eserverSocket = new ServerSocket(Constants.SOCKET_PORT);\u003c/xhtml:div\u003e} catch (IOException ex) {...}\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003elistening = true;\u003cxhtml:br/\u003ewhile(listening) {\u003cxhtml:div style=\"margin-left:10px;\"\u003estart();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic String getStockSymbol(String name) {...}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic BigDecimal getStockValue(String symbol) {...}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epublic void run() {\u003cxhtml:div style=\"margin-left:10px;\"\u003etry {\u003cxhtml:div style=\"margin-left:10px;\"\u003eclientSocket = serverSocket.accept();\u003c/xhtml:div\u003e} catch (IOException e) {...}\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe previous two examples within any type of Enterprise JavaBean violate the EJB specification by attempting to listen on a socket, accepting connections on a socket, or using a socket for multicast.\u003c/Body_Text\u003e\n            "
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Community",
      "submission_date": "2006-12-15T00:00:00Z",
      "submission_comment": "Submitted by members of the CWE community to extend early CWE versions"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Relationships, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29T00:00:00Z",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-12-28T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Use of an improper API",
      "entry_id": "SFP3"
    }
  ]
}
