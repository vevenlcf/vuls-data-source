{
  "id": "820",
  "name": "Missing Synchronization",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.",
  "extended_description": "If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "662",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "662",
      "view_id": "1305",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "662",
      "view_id": "1340",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {},
  "common_consequences": [
    {
      "scope": [
        "Integrity",
        "Confidentiality",
        "Other"
      ],
      "impact": [
        "Modify Application Data",
        "Read Application Data",
        "Alter Execution Logic"
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eThe following code intends to fork a process, then have both the parent and child processes print a single line.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003estatic void print (char * string) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003echar * word;\u003cxhtml:br/\u003eint counter;\u003cxhtml:br/\u003efor (word = string; counter = *word++; ) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003eputc(counter, stdout);\u003cxhtml:br/\u003efflush(stdout);\u003cxhtml:br/\u003e\n                                 \u003cxhtml:i\u003e/* Make timing window a little larger... */\u003c/xhtml:i\u003e\n                                 \u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003esleep(1);\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eint main(void) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003epid_t pid;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003epid = fork();\u003cxhtml:br/\u003eif (pid == -1) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eexit(-2);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse if (pid == 0) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprint(\"child\\n\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprint(\"PARENT\\n\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eexit(0);\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eOne might expect the code to print out something like:\u003c/Body_Text\u003e\n               \u003cBody_Text\u003e\n                  \u003cxhtml:div\u003e\n                     \u003cxhtml:div\u003ePARENT\u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003echild\u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Body_Text\u003e\n               \u003cBody_Text\u003eHowever, because the parent and child are executing concurrently, and stdout is flushed each time a character is printed, the output might be mixed together, such as:\u003c/Body_Text\u003e\n               \u003cBody_Text\u003e\n                  \u003cxhtml:div\u003e\n                     \u003cxhtml:div\u003ePcAhRiElNdT\u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003e[blank line]\u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003e[blank line]\u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Body_Text\u003e\n            "
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2010-08-06T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-07-17T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-09-23T00:00:00Z",
        "modification_comment": "updated Maintenance_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Synchronize access to static fields that can be modified by untrusted code",
      "entry_id": "LCK05-J"
    }
  ],
  "notes": [
    {
      "type": "Maintenance",
      "text": "Deeper research is necessary for synchronization and related mechanisms, including locks, mutexes, semaphores, and other mechanisms. Multiple entries are dependent on this research, which includes relationships to concurrency, race conditions, reentrant functions, etc.  CWE-662 and its children - including CWE-667, CWE-820, CWE-821, and others - may need to be modified significantly, along with their relationships."
    }
  ]
}
