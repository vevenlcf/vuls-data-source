{
  "id": "1310",
  "name": "Missing Ability to Patch ROM Code",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.",
  "extended_description": "\n\t\t\t\t\u003cxhtml:p\u003eA System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use.\u003c/xhtml:p\u003e\n\t\t\t\t\n\t\t\t\t\u003cxhtml:p\u003eA common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped.  This leaves the system in a vulnerable state where an adversary can compromise the SoC.\u003c/xhtml:p\u003e\n\t\t\t",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1329",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "System on Chip",
        "prevalence": "Undetermined"
      }
    ],
    "operating_system": [
      {
        "class": "OS-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "architecture": [
      {
        "class": "Architecture-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "This issue could be introduced during hardware architecture and design and can be identified later during Testing."
      ]
    },
    {
      "phase": "Implementation",
      "note": [
        "This issue could be introduced during implementation and can be identified later during Testing."
      ]
    },
    {
      "phase": "Integration",
      "note": [
        "This issue could be introduced during integration and can be identified later during Testing."
      ]
    },
    {
      "phase": "Manufacturing",
      "note": [
        "This issue could be introduced during manufacturing and can be identified later during Testing."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Varies by Context",
        "Reduce Maintainability"
      ],
      "note": "When the system is unable to be patched, it can be left in a vulnerable state.",
      "likelihood": "High"
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "\n\t\t\t\t\t  Secure patch support to allow ROM code to be patched on the next boot.\n                    "
      ],
      "effectiveness": "Moderate",
      "effectiveness_notes": "\n                        Some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"\n                    "
    },
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "\n\t\t\t\t\t    Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.\n                    "
      ],
      "effectiveness": "Moderate",
      "effectiveness_notes": "\n                        Patches that use hardware fuses will have limitations in terms of size and the number of patches that can be supported. Note that some parts of the hardware initialization or signature verification done to authenticate patches will always be \"not patchable.\"\n                    "
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-146",
      "text": "\n\t\t\t\t\t\u003cIntro_Text\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eA System-on-Chip (SOC) implements a Root-of-Trust (RoT) in ROM to boot secure code. However, at times this ROM code might have security vulnerabilities and need to be patched. Since ROM is immutable, it can be impossible to patch.\u003c/xhtml:p\u003e\n\t\t\t\t\t\u003c/Intro_Text\u003e\n\t\t\t\t\t\u003cBody_Text\u003eROM does not have built-in application-programming interfaces (APIs) to patch if the code is vulnerable. Implement mechanisms to patch the vulnerable ROM code.\u003c/Body_Text\u003e\n\t\t\t\t"
    }
  ],
  "references": [
    {
      "reference_id": "REF-1121",
      "author": [
        "Moritz Lipp",
        "Michael Schwarz",
        "Daniel Gruss",
        "Thomas Prescher",
        "Werner Haas",
        "Anders Fogh",
        "Jann Horn",
        "Stegfan Mangard",
        "Paul Kocher",
        "Daniel Genkin",
        "Yuval Yarom",
        "Mike Hamberg"
      ],
      "title": "Meltdown: Reading Kernel Memory from User Space",
      "url": "https://meltdownattack.com/meltdown.pdf",
      "publication_year": "2018",
      "publication_month": "--01",
      "publication_day": "---03"
    },
    {
      "reference_id": "REF-1122",
      "author": [
        "Moritz Lipp",
        "Michael Schwarz",
        "Daniel Gruss",
        "Thomas Prescher",
        "Werner Haas",
        "Anders Fogh",
        "Jann Horn",
        "Stegfan Mangard",
        "Paul Kocher",
        "Daniel Genkin",
        "Yuval Yarom",
        "Mike Hamberg"
      ],
      "title": "Spectre Attacks: Exploiting Speculative Execution",
      "url": "https://spectreattack.com/spectre.pdf",
      "publication_year": "2018",
      "publication_month": "--01",
      "publication_day": "---03"
    },
    {
      "reference_id": "REF-1123",
      "author": [
        "Dmitry Evtyushkin",
        "Dmitry Ponomarev",
        "Nael Abu-Ghazaleh"
      ],
      "title": "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR",
      "url": "https://ieeexplore.ieee.org/abstract/document/7783743/",
      "publication_year": "2016",
      "publication_month": "--10",
      "publication_day": "---19"
    },
    {
      "reference_id": "REF-1124",
      "author": [
        "Qian Ge",
        "Yuval Yarom",
        "David Cock",
        "Gernot Heiser"
      ],
      "title": "A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware",
      "url": "https://eprint.iacr.org/2016/613.pdf",
      "publication_year": "2016",
      "publication_month": "--10",
      "publication_day": "---24"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Narasimha Kumar V Mangipudi",
      "submission_organization": "Intel Corporation",
      "submission_date": "2020-04-25T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Maintenance_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Maintenance_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Common_Consequences, Potential_Mitigations, Relationships"
      }
    ]
  }
}
