{
  "id": "798",
  "name": "Use of Hard-coded Credentials",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
  "extended_description": "\n            \u003cxhtml:p\u003eHard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\u003c/xhtml:p\u003e\n            \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n               \u003cxhtml:div\u003eInbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.\u003c/xhtml:div\u003e\n               \u003cxhtml:div\u003eOutbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component.\u003c/xhtml:div\u003e\n            \u003c/xhtml:div\u003e\n            \u003cxhtml:p\u003eIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "287",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "287",
      "view_id": "1003",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "344",
      "view_id": "1000"
    },
    {
      "nature": "ChildOf",
      "cweid": "671",
      "view_id": "1000"
    },
    {
      "nature": "PeerOf",
      "cweid": "257",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Mobile",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "REALIZATION: This weakness is caused during implementation of an architectural security tactic."
      ]
    }
  ],
  "likelihood_of_exploit": "High",
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism"
      ],
      "note": "If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question."
    },
    {
      "scope": [
        "Integrity",
        "Confidentiality",
        "Availability",
        "Access Control",
        "Other"
      ],
      "impact": [
        "Read Application Data",
        "Gain Privileges or Assume Identity",
        "Execute Unauthorized Code or Commands",
        "Other"
      ],
      "note": "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eFor outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eIn Windows environments, the Encrypted File System (EFS) may provide some protection.\u003c/xhtml:p\u003e\n               "
      ]
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key."
      ]
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection."
      ]
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eFor inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\u003c/xhtml:p\u003e\n               "
      ]
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eFor front-end to back-end connections: Three solutions are possible, although none are complete.\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:ul\u003e\n                        \u003cxhtml:li\u003eThe first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\u003c/xhtml:li\u003e\n                        \u003cxhtml:li\u003eNext, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\u003c/xhtml:li\u003e\n                        \u003cxhtml:li\u003eFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\u003c/xhtml:li\u003e\n                     \u003c/xhtml:ul\u003e\n                  \u003c/xhtml:div\u003e\n               "
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-13",
      "text": "\n               \u003cIntro_Text\u003eThe following code uses a hard-coded password to connect to a database:\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003e...\u003cxhtml:br/\u003eDriverManager.getConnection(url, \"scott\", \"tiger\");\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003ejavap -c ConnMngr.class\u003cxhtml:div style=\"margin-left:10px;\"\u003e22: ldc #36; //String jdbc:mysql://ixne.com/rxsql\u003cxhtml:br/\u003e24: ldc #38; //String scott\u003cxhtml:br/\u003e26: ldc #17; //String tiger\u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-14",
      "text": "\n               \u003cIntro_Text\u003eThe following code is an example of an internal hard-coded password in the back-end:\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003eint VerifyAdmin(char *password) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eif (strcmp(password, \"Mew!\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003e\n                                 printf(\"Incorrect Password!\\n\");\u003cxhtml:br/\u003ereturn(0)\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eprintf(\"Entering Diagnostic Mode...\\n\");\u003cxhtml:br/\u003ereturn(1);\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eint VerifyAdmin(String password) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (!password.equals(\"Mew!\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003ereturn(0)\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e//Diagnostic Mode\u003cxhtml:br/\u003ereturn(1);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eEvery instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\"\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-92",
      "text": "\n               \u003cIntro_Text\u003eThe following code examples attempt to verify a password using a hard-coded cryptographic key.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003eint VerifyAdmin(char *password) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eif (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003e\n                                 \u003cxhtml:br/\u003eprintf(\"Incorrect Password!\\n\");\u003cxhtml:br/\u003ereturn(0);\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eprintf(\"Entering Diagnostic Mode...\\n\");\u003cxhtml:br/\u003ereturn(1);\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic boolean VerifyAdmin(String password) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.out.println(\"Entering Diagnostic Mode...\");\u003cxhtml:br/\u003ereturn true;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eSystem.out.println(\"Incorrect Password!\");\u003cxhtml:br/\u003ereturn false;\u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C#\"\u003e\n                  \u003cxhtml:div\u003eint VerifyAdmin(String password) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eConsole.WriteLine(\"Entering Diagnostic Mode...\");\u003cxhtml:br/\u003ereturn(1);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eConsole.WriteLine(\"Incorrect Password!\");\u003cxhtml:br/\u003ereturn(0);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-43",
      "text": "\n               \u003cIntro_Text\u003eThe following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.\u003c/Intro_Text\u003e\n               \u003cBody_Text\u003eThis Java example shows a properties file with a cleartext username / password pair.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003e\n                     \u003cxhtml:br/\u003e\n                     \u003cxhtml:i\u003e# Java Web App ResourceBundle properties file\u003c/xhtml:i\u003e\n                     \u003cxhtml:br/\u003e...\u003cxhtml:br/\u003ewebapp.ldap.username=secretUsername\u003cxhtml:br/\u003ewebapp.ldap.password=secretPassword\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"ASP.NET\"\u003e\n                  \u003cxhtml:div\u003e...\u003cxhtml:br/\u003e\u0026lt;connectionStrings\u0026gt;\u003cxhtml:div style=\"margin-left:10px;\"\u003e\u0026lt;add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /\u0026gt;\u003c/xhtml:div\u003e\u0026lt;/connectionStrings\u0026gt;\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eUsername and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2010-2772",
      "description": "SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2772"
    },
    {
      "reference": "CVE-2010-2073",
      "description": "FTP server library uses hard-coded usernames and passwords for three default accounts",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2073"
    },
    {
      "reference": "CVE-2010-1573",
      "description": "Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1573"
    },
    {
      "reference": "CVE-2008-2369",
      "description": "Server uses hard-coded authentication key",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2369"
    },
    {
      "reference": "CVE-2008-0961",
      "description": "Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0961"
    },
    {
      "reference": "CVE-2008-1160",
      "description": "Security appliance uses hard-coded password allowing attackers to gain root access",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1160"
    },
    {
      "reference": "CVE-2006-7142",
      "description": "Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7142"
    },
    {
      "reference": "CVE-2005-3716",
      "description": "VoIP product uses unchangeable hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3716"
    },
    {
      "reference": "CVE-2005-3803",
      "description": "VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3803"
    },
    {
      "reference": "CVE-2005-0496",
      "description": "Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0496"
    }
  ],
  "references": [
    {
      "section": "Chapter 8, \"Key Management Issues\" Page 272",
      "reference_id": "REF-7",
      "author": [
        "Michael Howard",
        "David LeBlanc"
      ],
      "title": "Writing Secure Code",
      "url": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
      "publication_year": "2002",
      "publication_month": "--12",
      "publication_day": "---04",
      "publisher": "Microsoft Press",
      "edition": "2nd Edition"
    },
    {
      "reference_id": "REF-729",
      "author": [
        "Johannes Ullrich"
      ],
      "title": "Top 25 Series - Rank 11 - Hardcoded Credentials",
      "url": "http://blogs.sans.org/appsecstreetfighter/2010/03/10/top-25-series-rank-11-hardcoded-credentials/",
      "publication_year": "2010",
      "publication_month": "--03",
      "publication_day": "---10",
      "publisher": "SANS Software Security Institute"
    },
    {
      "reference_id": "REF-172",
      "author": [
        "Chris Wysopal"
      ],
      "title": "Mobile App Top 10 List",
      "url": "http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/",
      "publication_year": "2010",
      "publication_month": "--12",
      "publication_day": "---13"
    },
    {
      "section": "ASCSM-CWE-798",
      "reference_id": "REF-962",
      "author": [
        "Object Management Group (OMG)"
      ],
      "title": "Automated Source Code Security Measure (ASCSM)",
      "url": "http://www.omg.org/spec/ASCSM/1.0/",
      "publication_year": "2016",
      "publication_month": "--01"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2010-01-15T00:00:00Z",
      "submission_comment": "More abstract entry for hard-coded password and hard-coded cryptographic key."
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-04-05T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Common_Consequences, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Observed_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-02-21T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Detection_Factors"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2015-12-07T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27T00:00:00Z",
        "modification_comment": "updated References"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated References, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-09-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-06-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "detection_methods": [
    {
      "method": "Black Box",
      "description": "Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.",
      "effectiveness": "Moderate"
    },
    {
      "method": "Automated Static Analysis",
      "description": "Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods."
    },
    {
      "method": "Manual Static Analysis",
      "description": "This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the software, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.",
      "effectiveness_notes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
    },
    {
      "method": "Manual Dynamic Analysis",
      "description": "\n                  \u003cxhtml:p\u003eFor hard-coded credentials in incoming authentication: use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eAttach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\u003c/xhtml:p\u003e\n               "
    },
    {
      "method": "Automated Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBytecode Weakness Analysis - including disassembler + source code weakness analysis\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eBinary Weakness Analysis - including disassembler + source code weakness analysis\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Manual Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBinary / Bytecode disassembler - then use manual analysis for vulnerabilities \u0026amp; anomalies\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Dynamic Analysis with Manual Results Interpretation",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eNetwork Sniffer\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eForced Path Execution\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Manual Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFocused Manual Spotcheck - Focused manual analysis of source\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eManual Source Code Review (not inspections)\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Automated Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eSource code Weakness Analyzer\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eContext-configured Source Code Weakness Analyzer\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Automated Static Analysis",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eConfiguration Checker\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Architecture or Design Review",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eFormal Methods / Correct-By-Construction\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Never hard code sensitive information",
      "entry_id": "MSC03-J"
    },
    {
      "taxonomy_name": "OMG ASCSM",
      "entry_id": "ASCSM-CWE-798"
    }
  ],
  "related_attack_patterns": [
    "191",
    "70"
  ]
}
