{
  "id": "41",
  "name": "Improper Resolution of Path Equivalence",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.",
  "extended_description": "Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "706",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Access Control"
      ],
      "impact": [
        "Read Files or Directories",
        "Modify Files or Directories",
        "Bypass Protection Mechanism"
      ],
      "note": "An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism."
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-5",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Input Validation"
    },
    {
      "mitigation_id": "MIT-30",
      "phase": [
        "Implementation"
      ],
      "description": [
        "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."
      ],
      "strategy": "Output Encoding"
    },
    {
      "mitigation_id": "MIT-20",
      "phase": [
        "Implementation"
      ],
      "description": [
        "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
      ],
      "strategy": "Input Validation"
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2000-1114",
      "description": "Source code disclosure using trailing dot",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1114"
    },
    {
      "reference": "CVE-2002-1986",
      "description": "Source code disclosure using trailing dot",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1986"
    },
    {
      "reference": "CVE-2004-2213",
      "description": "Source code disclosure using trailing dot or trailing encoding space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2213"
    },
    {
      "reference": "CVE-2005-3293",
      "description": "Source code disclosure using trailing dot",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3293"
    },
    {
      "reference": "CVE-2004-0061",
      "description": "Bypass directory access restrictions using trailing dot in URL",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0061"
    },
    {
      "reference": "CVE-2000-1133",
      "description": "Bypass directory access restrictions using trailing dot in URL",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1133"
    },
    {
      "reference": "CVE-2001-1386",
      "description": "Bypass check for \".lnk\" extension using \".lnk.\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1386"
    },
    {
      "reference": "CVE-2001-0693",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0693"
    },
    {
      "reference": "CVE-2001-0778",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0778"
    },
    {
      "reference": "CVE-2001-1248",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1248"
    },
    {
      "reference": "CVE-2004-0280",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0280"
    },
    {
      "reference": "CVE-2005-0622",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0622"
    },
    {
      "reference": "CVE-2005-1656",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1656"
    },
    {
      "reference": "CVE-2002-1603",
      "description": "Source disclosure via trailing encoded space \"%20\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1603"
    },
    {
      "reference": "CVE-2001-0054",
      "description": "Multi-Factor Vulnerability (MVF). directory traversal and other issues in FTP server using Web encodings such as \"%20\"; certain manipulations have unusual side effects.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0054"
    },
    {
      "reference": "CVE-2002-1451",
      "description": "Trailing space (\"+\" in query string) leads to source code disclosure.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1451"
    },
    {
      "reference": "CVE-2000-0293",
      "description": "Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0293"
    },
    {
      "reference": "CVE-2001-1567",
      "description": "\"+\" characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1567"
    },
    {
      "reference": "CVE-2002-0253",
      "description": "Overlaps infoleak",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0253"
    },
    {
      "reference": "CVE-2001-0446",
      "description": "Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0446"
    },
    {
      "reference": "CVE-2004-0334",
      "description": "Bypass Basic Authentication for files using trailing \"/\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0334"
    },
    {
      "reference": "CVE-2001-0893",
      "description": "Read sensitive files with trailing \"/\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0893"
    },
    {
      "reference": "CVE-2001-0892",
      "description": "Web server allows remote attackers to view sensitive files under the document root (such as .htpasswd) via a GET request with a trailing /.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0892"
    },
    {
      "reference": "CVE-2004-1814",
      "description": "Directory traversal vulnerability in server allows remote attackers to read protected files via .. (dot dot) sequences in an HTTP request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1814"
    },
    {
      "reference": "BID:3518",
      "description": "Source code disclosure",
      "link": "http://www.securityfocus.com/bid/3518"
    },
    {
      "reference": "CVE-2002-1483",
      "description": "Read files with full pathname using multiple internal slash.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1483"
    },
    {
      "reference": "CVE-1999-1456",
      "description": "Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1456"
    },
    {
      "reference": "CVE-2004-0578",
      "description": "Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0578"
    },
    {
      "reference": "CVE-2002-0275",
      "description": "Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0275"
    },
    {
      "reference": "CVE-2004-1032",
      "description": "Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1032"
    },
    {
      "reference": "CVE-2002-1238",
      "description": "Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1238"
    },
    {
      "reference": "CVE-2004-1878",
      "description": "Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash).",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1878"
    },
    {
      "reference": "CVE-2005-1365",
      "description": "Server allows remote attackers to execute arbitrary commands via a URL with multiple leading \"/\" (slash) characters and \"..\" sequences.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1365"
    },
    {
      "reference": "CVE-2000-1050",
      "description": "Access directory using multiple leading slash.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1050"
    },
    {
      "reference": "CVE-2001-1072",
      "description": "Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1072"
    },
    {
      "reference": "CVE-2004-0235",
      "description": "Archive extracts to arbitrary files using multiple leading slash in filenames in the archive.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0235"
    },
    {
      "reference": "CVE-2002-1078",
      "description": "Directory listings in web server using multiple trailing slash",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1078"
    },
    {
      "reference": "CVE-2004-0847",
      "description": "ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) \"\\\" (backslash) or (2) \"%5C\" (encoded backslash), aka \"Path Validation Vulnerability.\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0847"
    },
    {
      "reference": "CVE-2000-0004",
      "description": "Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0004"
    },
    {
      "reference": "CVE-2002-0304",
      "description": "Server allows remote attackers to read password-protected files via a /./ in the HTTP request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0304"
    },
    {
      "reference": "BID:6042",
      "description": "Input Validation error",
      "link": "http://www.securityfocus.com/bid/6042"
    },
    {
      "reference": "CVE-1999-1083",
      "description": "Possibly (could be a cleansing error)",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1083"
    },
    {
      "reference": "CVE-2004-0815",
      "description": "\"/./////etc\" cleansed to \".///etc\" then \"/etc\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0815"
    },
    {
      "reference": "CVE-2002-0112",
      "description": "Server allows remote attackers to view password protected files via /./ in the URL.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0112"
    },
    {
      "reference": "CVE-2004-0696",
      "description": "List directories using desired path and \"*\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0696"
    },
    {
      "reference": "CVE-2002-0433",
      "description": "List files in web server using \"*.ext\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
    },
    {
      "reference": "CVE-2001-1152",
      "description": "Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1152"
    },
    {
      "reference": "CVE-2000-0191",
      "description": "application check access for restricted URL before canonicalization",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0191"
    },
    {
      "reference": "CVE-2005-1366",
      "description": "CGI source disclosure using \"dirname/../cgi-bin\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1366"
    },
    {
      "reference": "CVE-1999-0012",
      "description": "Multiple web servers allow restriction bypass using 8.3 names instead of long names",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0012"
    },
    {
      "reference": "CVE-2001-0795",
      "description": "Source code disclosure using 8.3 file name.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0795"
    },
    {
      "reference": "CVE-2005-0471",
      "description": "Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0471"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Name"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Other_Notes, Potential_Mitigations, Relationship_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Observed_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Detection_Factors, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Affected_Resources, Applicable_Platforms, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Observed_Examples, Potential_Mitigations, Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Path Equivalence",
        "date": "2008-04-11T00:00:00Z"
      },
      {
        "text": "Failure to Resolve Path Equivalence",
        "date": "2009-05-27T00:00:00Z"
      }
    ]
  },
  "detection_methods": [
    {
      "method": "Automated Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBytecode Weakness Analysis - including disassembler + source code weakness analysis\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Manual Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBinary / Bytecode disassembler - then use manual analysis for vulnerabilities \u0026amp; anomalies\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Dynamic Analysis with Automated Results Interpretation",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eWeb Application Scanner\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eWeb Services Scanner\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eDatabase Scanners\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Dynamic Analysis with Manual Results Interpretation",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFuzz Tester\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eFramework-based Fuzzer\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Manual Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFocused Manual Spotcheck - Focused manual analysis of source\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eManual Source Code Review (not inspections)\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Automated Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eSource code Weakness Analyzer\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eContext-configured Source Code Weakness Analyzer\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Architecture or Design Review",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFormal Methods / Correct-By-Construction\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Path Equivalence"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Canonicalize path names originating from untrusted sources",
      "entry_id": "FIO02-C"
    }
  ],
  "related_attack_patterns": [
    "3"
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "Some of these manipulations could be effective in path traversal issues, too."
    }
  ],
  "affected_resources": [
    "File or Directory"
  ]
}
