{
  "id": "570",
  "name": "Expression is Always False",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The software contains an expression that will always evaluate to false.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "710",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "561",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Quality Degradation",
        "Varies by Context"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use Static Analysis tools to spot such conditions."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eIn the following Java example the updateUserAccountOrder() method used within an e-business product ordering/inventory application will validate the product number that was ordered and the user account number. If they are valid, the method will update the product inventory, the user account, and the user order appropriately.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003e\n                     \u003cxhtml:br/\u003epublic void updateUserAccountOrder(String productNumber, String accountNumber) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eboolean isValidProduct = false;\u003cxhtml:br/\u003eboolean isValidAccount = false;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (validProductNumber(productNumber)) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eisValidProduct = true;\u003cxhtml:br/\u003eupdateInventory(productNumber);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003ereturn;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (validAccountNumber(accountNumber)) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eisValidProduct = true;\u003cxhtml:br/\u003eupdateAccount(accountNumber, productNumber);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (isValidProduct \u0026amp;\u0026amp; isValidAccount) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eupdateAccountOrder(accountNumber, productNumber);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eHowever, the method never sets the isValidAccount variable after initializing it to false so the isValidProduct is mistakenly used twice. The result is that the expression \"isValidProduct \u0026amp;\u0026amp; isValidAccount\" will always evaluate to false, so the updateAccountOrder() method will never be invoked. This will create serious problems with the product ordering application since the user account and inventory databases will be updated but the order will not be updated.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eThis can be easily corrected by updating the appropriate variable.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\"\u003e\n                  \u003cxhtml:div\u003e...\u003cxhtml:br/\u003eif (validAccountNumber(accountNumber)) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eisValidAccount = true;\u003cxhtml:br/\u003eupdateAccount(accountNumber, productNumber);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eIn the following example, the hasReadWriteAccess method uses bit masks and bit operators to determine if a user has read and write privileges for a particular process. The variable mask is defined as a bit mask from the BIT_READ and BIT_WRITE constants that have been defined. The variable mask is used within the predicate of the hasReadWriteAccess method to determine if the userMask input parameter has the read and write bits set.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003e#define BIT_READ 0x0001 // 00000001\u003cxhtml:br/\u003e#define BIT_WRITE 0x0010 // 00010000\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eunsigned int mask = BIT_READ \u0026amp; BIT_WRITE; /* intended to use \"|\" */\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e// using \"\u0026amp;\", mask = 00000000\u003cxhtml:br/\u003e// using \"|\", mask = 00010001\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e// determine if user has read and write access\u003cxhtml:br/\u003eint hasReadWriteAccess(unsigned int userMask) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003e// if the userMask has read and write bits set\u003cxhtml:br/\u003e// then return 1 (true)\u003cxhtml:br/\u003eif (userMask \u0026amp; mask) {\u003cxhtml:div style=\"margin-left:10px;\"\u003ereturn 1;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e// otherwise return 0 (false)\u003cxhtml:br/\u003ereturn 0;\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eHowever the bit operator used to initialize the mask variable is the AND operator rather than the intended OR operator (CWE-480), this resulted in the variable mask being set to 0. As a result, the if statement will always evaluate to false and never get executed.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eThe use of bit masks, bit operators and bitwise operations on variables can be difficult. If possible, try to use frameworks or libraries that provide appropriate functionality and abstract the implementation.\u003c/Body_Text\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eIn the following example, the updateInventory method used within an e-business inventory application will update the inventory for a particular product. This method includes an if statement with an expression that will always evaluate to false. This is a common practice in C/C++ to introduce debugging statements quickly by simply changing the expression to evaluate to true and then removing those debugging statements by changing expression to evaluate to false. This is also a common practice for disabling features no longer needed.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003eint updateInventory(char* productNumber, int numberOfItems) {\u003cxhtml:br/\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eint initCount = getProductCount(productNumber);\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eint updatedCount = initCount + numberOfItems;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eint updated = updateProductCount(updatedCount);\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e// if statement for debugging purposes only\u003cxhtml:br/\u003eif (1 == 0) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003e\n                                 \u003cxhtml:br/\u003echar productName[128];\u003cxhtml:br/\u003eproductName = getProductName(productNumber);\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003eprintf(\"product %s initially has %d items in inventory \\n\", productName, initCount);\u003cxhtml:br/\u003eprintf(\"adding %d items to inventory for %s \\n\", numberOfItems, productName);\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003eif (updated == 0) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Inventory updated for product %s to %d items \\n\", productName, updatedCount);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Inventory not updated for product: %s \\n\", productName);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                              \u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003ereturn updated;\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eUsing this practice for introducing debugging statements or disabling features creates dead code that can cause problems during code maintenance and potentially introduce vulnerabilities. To avoid using expressions that evaluate to false for debugging purposes a logging API or debugging API should be used for the output of debugging messages.\u003c/Body_Text\u003e\n            "
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Community",
      "submission_date": "2006-12-15T00:00:00Z",
      "submission_comment": "Submitted by members of the CWE community to extend early CWE versions"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Relationships, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Other_Notes, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Compile cleanly at high warning levels",
      "entry_id": "MSC00-C"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Glitch in computation",
      "entry_id": "SFP1"
    }
  ]
}
