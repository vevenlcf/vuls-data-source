{
  "id": "32",
  "name": "Path Traversal: '...' (Triple Dot)",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.",
  "extended_description": "\n            \u003cxhtml:p\u003eThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eThe '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182).\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "23",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity"
      ],
      "impact": [
        "Read Files or Directories",
        "Modify Files or Directories"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-5.1",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\u003c/xhtml:p\u003e\n               "
      ],
      "effectiveness": "High",
      "strategy": "Input Validation"
    },
    {
      "mitigation_id": "MIT-20",
      "phase": [
        "Implementation"
      ],
      "description": [
        "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
      ],
      "strategy": "Input Validation"
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2001-0467",
      "description": "\"\\...\" in web server",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0467"
    },
    {
      "reference": "CVE-2001-0615",
      "description": "\"...\" or \"....\" in chat server",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0615"
    },
    {
      "reference": "CVE-2001-0963",
      "description": "\"...\" in cd command in FTP server",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0963"
    },
    {
      "reference": "CVE-2001-1193",
      "description": "\"...\" in cd command in FTP server",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1193"
    },
    {
      "reference": "CVE-2001-1131",
      "description": "\"...\" in cd command in FTP server",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1131"
    },
    {
      "reference": "CVE-2001-0480",
      "description": "read of arbitrary files and directories using GET or CD with \"...\" in Windows-based FTP server.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0480"
    },
    {
      "reference": "CVE-2002-0288",
      "description": "read files using \".\" and Unicode-encoded \"/\" or \"\\\" characters in the URL.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0288"
    },
    {
      "reference": "CVE-2003-0313",
      "description": "Directory listing of web server using \"...\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0313"
    },
    {
      "reference": "CVE-2005-1658",
      "description": "Triple dot",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1658"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Maintenance_Notes, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Description, Maintenance_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Description, Maintenance_Notes, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Maintenance_Notes, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Path Issue - Triple Dot - '...'",
        "date": "2008-04-11T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "'...' (triple dot)"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Path Traversal",
      "entry_id": "SFP16"
    }
  ],
  "notes": [
    {
      "type": "Maintenance",
      "text": "\n               \u003cxhtml:p\u003eThis manipulation-focused entry is currently hiding two distinct weaknesses, so it might need to be split. The manipulation is effective in two different contexts:\u003c/xhtml:p\u003e\n               \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                  \u003cxhtml:ol\u003e\n                     \u003cxhtml:li\u003eit is equivalent to \"..\\..\" on Windows, or\u003c/xhtml:li\u003e\n                     \u003cxhtml:li\u003eit can take advantage of incomplete filtering, e.g. if the programmer does a single-pass removal of \"./\" in a string (collapse of data into unsafe value, CWE-182).\u003c/xhtml:li\u003e\n                  \u003c/xhtml:ol\u003e\n               \u003c/xhtml:div\u003e\n            "
    }
  ]
}
