{
  "id": "1311",
  "name": "Improper Translation of Security Attributes by Fabric Bridge",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.",
  "extended_description": "\n\t\t\t\t\u003cxhtml:p\u003eA bridge allows IP blocks supporting different fabric protocols to be integrated into the system.  Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP.\u003c/xhtml:p\u003e\n\t\t\t\t\u003cxhtml:p\u003eThe values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted).\u003c/xhtml:p\u003e\n\t\t\t\t\u003cxhtml:p\u003eA weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service.\u003c/xhtml:p\u003e\n\t\t\t",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "284",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "Verilog"
      },
      {
        "prevalence": "Undetermined",
        "name": "VHDL"
      }
    ],
    "technology": [
      {
        "class": "Technology-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Access Control"
      ],
      "impact": [
        "Modify Memory",
        "Read Memory",
        "Gain Privileges or Assume Identity",
        "Bypass Protection Mechanism",
        "Execute Unauthorized Code or Commands"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Ensure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n\t\t\t\t\t\u003cIntro_Text\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eThe bridge interfaces between OCP and AHB end points. OCP uses MReqInfo signal to indicate security attributes, whereas AHB uses HPROT signal to indicate the security attributes. The width of MReqInfo can be customized as needed. In this example, MReqInfo is 5-bits wide and carries the privilege level of the OCP controller.\u003c/xhtml:p\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eThe values 5’h11, 5’h10, 5’h0F, 5’h0D, 5’h0C, 5’h0B, 5’h09, 5’h08, 5’h04, and 5’h02 in MReqInfo indicate that the request is coming from a privileged state of the OCP bus controller. Values 5’h1F, 5’h0E, and 5’h00 indicate untrusted, privilege state.\u003c/xhtml:p\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eThough HPROT is a 5-bit signal, we only consider the lower, two bits in this example. HPROT values 2’b00 and 2’b10 are considered trusted, and 2’b01 and 2’b11 are considered untrusted.\u003c/xhtml:p\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eThe OCP2AHB bridge is expected to translate trusted identities on the controller side to trusted identities on the responder side.  Similarly, it is expected to translate untrusted identities on the controller side to untrusted identities on the responder side.\u003c/xhtml:p\u003e\n\t\t\t\t\t\u003c/Intro_Text\u003e\n\t\t\t\t\t\u003cExample_Code Nature=\"bad\" Language=\"Verilog\"\u003e\n\t\t\t\t\t\t\u003cxhtml:div\u003emodule ocp2ahb \n\t\t\t\t\t\t\u003cxhtml:br/\u003e( \n\t\t\t\t\t\t\u003cxhtml:br/\u003e  ahb_hprot, \n\t\t\t\t\t\t\u003cxhtml:br/\u003e  ocp_mreqinfo \n\t\t\t\t\t\t\u003cxhtml:br/\u003e); \n\t\t\t\t\t\t\u003cxhtml:br/\u003e\n\t\t\t\t\t\t\u003cxhtml:br/\u003eoutput [1:0] ahb_hprot;        // output is 2 bit signal for AHB HPROT\n\t\t\t\t\t\t\u003cxhtml:br/\u003einput [4:0] ocp_mreqinfo;      // input is 5 bit signal from OCP MReqInfo\n\t\t\t\t\t\t\u003cxhtml:br/\u003ewire [6:0] p0_mreqinfo_o_temp; // OCP signal that transmits hardware identity of bus controller\n\t\t\t\t\t\t\u003cxhtml:br/\u003e\n\t\t\t\t\t\t\u003cxhtml:br/\u003ewire y;\n\t\t\t\t\t\t\u003cxhtml:br/\u003ereg [1:0] ahb_hprot;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e\n\t\t\t\t\t\t\u003cxhtml:br/\u003e// hardware identity of bus controller is in bits 5:1 of p0_mreqinfo_o_temp signal\n\t\t\t\t\t\t\u003cxhtml:br/\u003eassign p0_mreqinfo_o_temp[6:0] = {1'b0, ahb_hprot[4:0], y};\n\t\t\t\t\t\t\u003cxhtml:br/\u003e\n\t\t\t\t\t\t\u003cxhtml:br/\u003ealways @*\n\t\t\t\t\t\t\u003cxhtml:br/\u003e\n\t\t\t\t\t\t\u003cxhtml:br/\u003ebegin\n\t\t\t\t\t\t\u003cxhtml:br/\u003e  case (p0_mreqinfo_o_temp[4:2])\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    000: ahb_hprot = 2'b11;    // OCP MReqInfo to AHB HPROT mapping\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    001: ahb_hprot = 2'b00;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    010: ahb_hprot = 2'b00;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    011: ahb_hprot = 2'b01;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    100: ahb_hprot = 2'b00;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    101: ahb_hprot = 2'b00;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    110: ahb_hprot = 2'b10;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e    111: ahb_hprot = 2'b00;\n\t\t\t\t\t\t\u003cxhtml:br/\u003e  endcase\n\t\t\t\t\t\t\u003cxhtml:br/\u003eend\n\t\t\t\t\t\t\u003cxhtml:br/\u003eendmodule\n\t\t\t\t\t\t\u003c/xhtml:div\u003e\n\t\t\t\t\t\u003c/Example_Code\u003e\n\t\t\t\t\t\u003cBody_Text\u003eLogic in the case statement only checks for MReqInfo bits 4:2, i.e., hardware-identity bits 3:1. When ocp_mreqinfo is 5’h1F or 5’h0E, p0_mreqinfo_o_temp[2] will be 1. As a result, untrusted IDs from OCP 5’h1F and 5’h0E get translated to trusted ahb_hprot values 2’b00.\u003c/Body_Text\u003e\n\t\t\t\t"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Manna",
      "submission_organization": "Intel Corporation",
      "submission_date": "2020-05-24T00:00:00Z"
    }
  },
  "related_attack_patterns": [
    "1",
    "180",
    "233"
  ]
}
