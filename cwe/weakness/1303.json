{
  "id": "1303",
  "name": "Non-Transparent Sharing of Microarchitectural Resources",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.",
  "extended_description": "\n\t\t\t\t\u003cxhtml:p\u003eModern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer’s view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context.\u003c/xhtml:p\u003e\n\t\t\t\t\n\t\t\t\t\u003cxhtml:p\u003eSome examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel.\u003c/xhtml:p\u003e\n\t\t\t\t\n\t\t\t\t\u003cxhtml:p\u003eIf the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.\u003c/xhtml:p\u003e\n\t\t\t",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1189",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "203",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Technology-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "operating_system": [
      {
        "class": "OS-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "architecture": [
      {
        "class": "Architecture-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."
      ]
    },
    {
      "phase": "Implementation",
      "note": [
        "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Application Data",
        "Read Memory"
      ],
      "note": "Microarchitectural side-channels have been used to leak specific information such as cryptographic keys, and Address Space Layout Randomization (ALSR) offsets as well as arbitrary memory."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers."
      ]
    },
    {
      "phase": [
        "Requirements"
      ],
      "description": [
        "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n\t\t\t\t\t\u003cIntro_Text\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eSecure programs perform bounds checking before accessing an array if the source of the array index is provided by an untrusted source such as user input. In the code below, data from array1 will not be accessed if x is out of bounds. However, if this code executes on a processor that performs speculative execution the outcome of the if statement could be mis-predicted and the access on the next line will occur with a value of x that can point to arbitrary locations in the program’s memory (out-of-bounds).\u003c/xhtml:p\u003e\n\t\t\t\t\t\t\u003cxhtml:p\u003eEven though the processor rolls back the architectural effects of the mis-predicted branch, the memory accesses alter data cache state, which is not rolled back after the branch is resolved. The cache state can reveal array1[x] thereby providing a mechanism to recover any word in this program’s memory space.\u003c/xhtml:p\u003e\n\t\t\t\t\t\u003c/Intro_Text\u003e\n\t\t\t\t\t\u003cExample_Code Nature=\"bad\"\u003e\n\t\t\t\t\t\tif (x \u0026lt; array1_size)\n    \t\t\t\t\t\ty = array2[array1[x] * 4096];\n\t\t\t\t\t\u003c/Example_Code\u003e\n\t\t\t\t\t\u003cBody_Text\u003eCode snippet is from the Spectre paper: https://spectreattack.com/spectre.pdf.\u003c/Body_Text\u003e\n\t\t\t\t"
    }
  ],
  "references": [
    {
      "reference_id": "REF-1121",
      "author": [
        "Moritz Lipp",
        "Michael Schwarz",
        "Daniel Gruss",
        "Thomas Prescher",
        "Werner Haas",
        "Anders Fogh",
        "Jann Horn",
        "Stegfan Mangard",
        "Paul Kocher",
        "Daniel Genkin",
        "Yuval Yarom",
        "Mike Hamberg"
      ],
      "title": "Meltdown: Reading Kernel Memory from User Space",
      "url": "https://meltdownattack.com/meltdown.pdf",
      "publication_year": "2018",
      "publication_month": "--01",
      "publication_day": "---03"
    },
    {
      "reference_id": "REF-1122",
      "author": [
        "Moritz Lipp",
        "Michael Schwarz",
        "Daniel Gruss",
        "Thomas Prescher",
        "Werner Haas",
        "Anders Fogh",
        "Jann Horn",
        "Stegfan Mangard",
        "Paul Kocher",
        "Daniel Genkin",
        "Yuval Yarom",
        "Mike Hamberg"
      ],
      "title": "Spectre Attacks: Exploiting Speculative Execution",
      "url": "https://spectreattack.com/spectre.pdf",
      "publication_year": "2018",
      "publication_month": "--01",
      "publication_day": "---03"
    },
    {
      "reference_id": "REF-1123",
      "author": [
        "Dmitry Evtyushkin",
        "Dmitry Ponomarev",
        "Nael Abu-Ghazaleh"
      ],
      "title": "Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR",
      "url": "https://ieeexplore.ieee.org/abstract/document/7783743/",
      "publication_year": "2016",
      "publication_month": "--10",
      "publication_day": "---19"
    },
    {
      "reference_id": "REF-1124",
      "author": [
        "Qian Ge",
        "Yuval Yarom",
        "David Cock",
        "Gernot Heiser"
      ],
      "title": "A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware",
      "url": "https://eprint.iacr.org/2016/613.pdf",
      "publication_year": "2016",
      "publication_month": "--10",
      "publication_day": "---24"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Nicole Fern",
      "submission_organization": "Tortuga Logic",
      "submission_date": "2020-05-08T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      }
    ]
  },
  "related_attack_patterns": [
    "663"
  ]
}
