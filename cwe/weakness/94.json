{
  "id": "94",
  "name": "Improper Control of Generation of Code ('Code Injection')",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
  "extended_description": "\n            \u003cxhtml:p\u003eWhen software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eInjection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "74",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "74",
      "view_id": "1003",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "913",
      "view_id": "1000"
    },
    {
      "nature": "ChildOf",
      "cweid": "691",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Interpreted",
        "prevalence": "Sometimes"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation",
      "note": [
        "REALIZATION: This weakness is caused during implementation of an architectural security tactic."
      ]
    }
  ],
  "likelihood_of_exploit": "Medium",
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism"
      ],
      "note": "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."
    },
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Gain Privileges or Assume Identity"
      ],
      "note": "Injected code can access resources that the attacker is directly prevented from accessing."
    },
    {
      "scope": [
        "Integrity",
        "Confidentiality",
        "Availability"
      ],
      "impact": [
        "Execute Unauthorized Code or Commands"
      ],
      "note": "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."
    },
    {
      "scope": [
        "Non-Repudiation"
      ],
      "impact": [
        "Hide Activities"
      ],
      "note": "Often the actions performed by injected control code are unlogged."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Refactor your program so that you do not have to dynamically generate code."
      ]
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eBe careful to avoid CWE-243 and other weaknesses related to jails.\u003c/xhtml:p\u003e\n               "
      ]
    },
    {
      "mitigation_id": "MIT-5",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eTo reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Input Validation"
    },
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
      ]
    },
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
      ]
    },
    {
      "mitigation_id": "MIT-32",
      "phase": [
        "Operation"
      ],
      "description": [
        "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."
      ],
      "strategy": "Compilation or Build Hardening"
    },
    {
      "mitigation_id": "MIT-32",
      "phase": [
        "Operation"
      ],
      "description": [
        "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."
      ],
      "strategy": "Environment Hardening"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-32",
      "text": "\n               \u003cIntro_Text\u003eThis example attempts to write user messages to a message file and allow users to view them.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"PHP\"\u003e\n                  \u003cxhtml:div\u003e$MessageFile = \"messages.out\";\u003cxhtml:br/\u003eif ($_GET[\"action\"] == \"NewMessage\") {\u003cxhtml:div style=\"margin-left:10px;\"\u003e$name = $_GET[\"name\"];\u003cxhtml:br/\u003e$message = $_GET[\"message\"];\u003cxhtml:br/\u003e$handle = fopen($MessageFile, \"a+\");\u003cxhtml:br/\u003efwrite($handle, \"\u0026lt;b\u0026gt;$name\u0026lt;/b\u0026gt; says '$message'\u0026lt;hr\u0026gt;\\n\");\u003cxhtml:br/\u003efclose($handle);\u003cxhtml:br/\u003eecho \"Message Saved!\u0026lt;p\u0026gt;\\n\";\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse if ($_GET[\"action\"] == \"ViewMessages\") {\u003cxhtml:div style=\"margin-left:10px;\"\u003einclude($MessageFile);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhile the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003ename=h4x0r\u003cxhtml:br/\u003emessage=%3C?php%20system(%22/bin/ls%20-l%22);?%3E\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003ewhich will decode to the following:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003e\u0026lt;?php system(\"/bin/ls -l\");?\u0026gt;\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eNotice that XSS (CWE-79) is also possible in this situation.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-31",
      "text": "\n               \u003cIntro_Text\u003eedit-config.pl: This CGI script is used to modify settings in a configuration file.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Perl\"\u003e\n                  \u003cxhtml:div\u003euse CGI qw(:standard);\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003esub config_file_add_key {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003emy ($fname, $key, $arg) = @_;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:i\u003e# code to add a field/key to a file goes here\u003c/xhtml:i\u003e\n                           \u003cxhtml:br/\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003esub config_file_set_key {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003emy ($fname, $key, $arg) = @_;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:i\u003e# code to set key to a particular file goes here\u003c/xhtml:i\u003e\n                           \u003cxhtml:br/\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003esub config_file_delete_key {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003emy ($fname, $key, $arg) = @_;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:i\u003e# code to delete key from a particular file goes here\u003c/xhtml:i\u003e\n                           \u003cxhtml:br/\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003esub handleConfigAction {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003emy ($fname, $action) = @_;\u003cxhtml:br/\u003emy $key = param('key');\u003cxhtml:br/\u003emy $val = param('val');\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:i\u003e# this is super-efficient code, especially if you have to invoke\u003c/xhtml:i\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:i\u003e# any one of dozens of different functions!\u003c/xhtml:i\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003emy $code = \"config_file_$action_key(\\$fname, \\$key, \\$val);\";\u003cxhtml:br/\u003eeval($code);\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e$configfile = \"/home/cwe/config.txt\";\u003cxhtml:br/\u003eprint header;\u003cxhtml:br/\u003eif (defined(param('action'))) {\u003cxhtml:div style=\"margin-left:10px;\"\u003ehandleConfigAction($configfile, param('action'));\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprint \"No action specified!\\n\";\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003eadd_key(\",\",\"); system(\"/bin/ls\");\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis would produce the following string in handleConfigAction():\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"result\"\u003e\n                  \u003cxhtml:div\u003econfig_file_add_key(\",\",\"); system(\"/bin/ls\");\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eAny arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\$fname, \\$key, \\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2021-22204",
      "description": "Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-22204"
    },
    {
      "reference": "CVE-2020-8218",
      "description": "\"Code injection\" in VPN product, as exploited in the wild per CISA KEV.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8218"
    },
    {
      "reference": "CVE-2008-5071",
      "description": "Eval injection in PHP program.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5071"
    },
    {
      "reference": "CVE-2002-1750",
      "description": "Eval injection in Perl program.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1750"
    },
    {
      "reference": "CVE-2008-5305",
      "description": "Eval injection in Perl program using an ID that should only contain hyphens and numbers.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305"
    },
    {
      "reference": "CVE-2002-1752",
      "description": "Direct code injection into Perl eval function.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1752"
    },
    {
      "reference": "CVE-2002-1753",
      "description": "Eval injection in Perl program.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1753"
    },
    {
      "reference": "CVE-2005-1527",
      "description": "Direct code injection into Perl eval function.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1527"
    },
    {
      "reference": "CVE-2005-2837",
      "description": "Direct code injection into Perl eval function.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2837"
    },
    {
      "reference": "CVE-2005-1921",
      "description": "MFV. code injection into PHP eval statement using nested constructs that should not be nested.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1921"
    },
    {
      "reference": "CVE-2005-2498",
      "description": "MFV. code injection into PHP eval statement using nested constructs that should not be nested.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2498"
    },
    {
      "reference": "CVE-2005-3302",
      "description": "Code injection into Python eval statement from a field in a formatted file.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3302"
    },
    {
      "reference": "CVE-2007-1253",
      "description": "Eval injection in Python program.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1253"
    },
    {
      "reference": "CVE-2001-1471",
      "description": "chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471"
    },
    {
      "reference": "CVE-2002-0495",
      "description": "Perl code directly injected into CGI library file from parameters to another CGI program.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0495"
    },
    {
      "reference": "CVE-2005-1876",
      "description": "Direct PHP code injection into supporting template file.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1876"
    },
    {
      "reference": "CVE-2005-1894",
      "description": "Direct code injection into PHP script that can be accessed by attacker.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1894"
    },
    {
      "reference": "CVE-2003-0395",
      "description": "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0395"
    }
  ],
  "references": [
    {
      "section": "\"Sin 3: Web-Client Related Vulnerabilities (XSS).\" Page 63",
      "reference_id": "REF-44",
      "author": [
        "Michael Howard",
        "David LeBlanc",
        "John Viega"
      ],
      "title": "24 Deadly Sins of Software Security",
      "publication_year": "2010",
      "publication": "McGraw-Hill"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Relationships, Research_Gaps, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-01-12T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Name"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Description, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Name"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-02-21T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2015-12-07T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Modes_of_Introduction, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-09-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28T00:00:00Z",
        "modification_comment": "updated Research_Gaps"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-06-28T00:00:00Z",
        "modification_comment": "updated Observed_Examples, Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Code Injection",
        "date": "2009-01-12T00:00:00Z"
      },
      {
        "text": "Failure to Control Generation of Code (aka 'Code Injection')",
        "date": "2009-05-27T00:00:00Z"
      },
      {
        "text": "Failure to Control Generation of Code ('Code Injection')",
        "date": "2011-03-29T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Code Evaluation and Injection",
      "entry_id": "CODE"
    }
  ],
  "related_attack_patterns": [
    "242",
    "35",
    "77"
  ]
}
