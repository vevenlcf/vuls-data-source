{
  "id": "566",
  "name": "Authorization Bypass Through User-Controlled SQL Primary Key",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",
  "extended_description": "\n            \u003cxhtml:p\u003eWhen a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eDatabase access control errors occur when:\u003c/xhtml:p\u003e\n            \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n               \u003cxhtml:ul\u003e\n                  \u003cxhtml:li\u003eData enters a program from an untrusted source.\u003c/xhtml:li\u003e\n                  \u003cxhtml:li\u003eThe data is used to specify the value of a primary key in a SQL query.\u003c/xhtml:li\u003e\n                  \u003cxhtml:li\u003eThe untrusted source does not have the permissions to be able to access all rows in the associated table.\u003c/xhtml:li\u003e\n               \u003c/xhtml:ul\u003e\n            \u003c/xhtml:div\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "639",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "technology": [
      {
        "prevalence": "Often",
        "name": "Database Server"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."
      ]
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Access Control"
      ],
      "impact": [
        "Read Application Data",
        "Modify Application Data",
        "Bypass Protection Mechanism"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eThe following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C#\"\u003e\n                  \u003cxhtml:div\u003e...\u003cxhtml:br/\u003econn = new SqlConnection(_ConnectionString);\u003cxhtml:br/\u003econn.Open();\u003cxhtml:br/\u003eint16 id = System.Convert.ToInt16(invoiceID.Text);\u003cxhtml:br/\u003eSqlCommand query = new SqlCommand( \"SELECT * FROM invoices WHERE id = @id\", conn);\u003cxhtml:br/\u003equery.Parameters.AddWithValue(\"@id\", id);\u003cxhtml:br/\u003eSqlDataReader objReader = objCommand.ExecuteReader();\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.\u003c/Body_Text\u003e\n            "
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Anonymous Tool Vendor (under NDA)",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Description, Other_Notes, Potential_Mitigations, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Name"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Modes_of_Introduction, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Access Control Bypass Through User-Controlled SQL Primary Key",
        "date": "2011-03-29T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Tainted input to variable",
      "entry_id": "SFP25"
    }
  ]
}
