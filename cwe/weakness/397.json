{
  "id": "397",
  "name": "Declaration of Throws for Generic Exception",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
  "extended_description": "Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "705",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "221",
      "view_id": "1000"
    },
    {
      "nature": "ChildOf",
      "cweid": "703",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "C++"
      },
      {
        "prevalence": "Undetermined",
        "name": "Java"
      },
      {
        "prevalence": "Undetermined",
        "name": "C#"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Non-Repudiation",
        "Other"
      ],
      "impact": [
        "Hide Activities",
        "Alter Execution Logic"
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eThe following method throws three types of exceptions.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic void doExchange() throws IOException, InvocationTargetException, SQLException {\u003cxhtml:div style=\"margin-left:10px;\"\u003e...\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhile it might seem tidier to write\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"bad\"\u003e\n                  \u003cxhtml:div\u003epublic void doExchange() throws Exception {\u003cxhtml:div style=\"margin-left:10px;\"\u003e...\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003edoing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.\u003c/Body_Text\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eEarly versions of C++ (C++98, C++03, C++11) included a feature known as Dynamic Exception Specification. This allowed functions to declare what type of exceptions it may throw. It is possible to declare a general class of exception to cover any derived exceptions that may be throw.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\"\u003e\n                  \u003cxhtml:div\u003eint myfunction() throw(std::exception) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (0) throw out_of_range();\u003cxhtml:br/\u003ethrow length_error();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eIn the example above, the code declares that myfunction() can throw an exception of type \"std::exception\" thus hiding details about the possible derived exceptions that could potentially be thrown.\u003c/Body_Text\u003e\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-6",
      "author": [
        "Katrina Tsipenyuk",
        "Brian Chess",
        "Gary McGraw"
      ],
      "title": "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors",
      "url": "https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf",
      "publication_year": "2005",
      "publication_month": "--11",
      "publication_day": "---07",
      "publication": "NIST Workshop on Software Security Assurance Tools Techniques and Metrics",
      "publisher": "NIST"
    },
    {
      "section": "ASCRM-CWE-397",
      "reference_id": "REF-961",
      "author": [
        "Object Management Group (OMG)"
      ],
      "title": "Automated Source Code Reliability Measure (ASCRM)",
      "url": "http://www.omg.org/spec/ASCRM/1.0/",
      "publication_year": "2016",
      "publication_month": "--01"
    },
    {
      "section": "ASCSM-CWE-397",
      "reference_id": "REF-962",
      "author": [
        "Object Management Group (OMG)"
      ],
      "title": "Automated Source Code Security Measure (ASCSM)",
      "url": "http://www.omg.org/spec/ASCSM/1.0/",
      "publication_year": "2016",
      "publication_month": "--01"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "7 Pernicious Kingdoms",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-24T00:00:00Z",
        "modification_comment": "Removed C from Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29T00:00:00Z",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated References"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Overly-Broad Throws Declaration",
        "date": "2008-04-11T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "7 Pernicious Kingdoms",
      "entry_name": "Overly-Broad Throws Declaration"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Do not throw RuntimeException, Exception, or Throwable",
      "entry_id": "ERR07-J"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Ambiguous Exception Type",
      "entry_id": "SFP5"
    },
    {
      "taxonomy_name": "OMG ASCSM",
      "entry_id": "ASCSM-CWE-397"
    },
    {
      "taxonomy_name": "OMG ASCRM",
      "entry_id": "ASCRM-CWE-397"
    }
  ],
  "notes": [
    {
      "type": "Applicable Platform",
      "text": "For C++, this weakness only applies to C++98, C++03, and C++11. It relies on a feature known as Dynamic Exception Specification, which was part of early versions of C++ but was deprecated in C++11. It has been removed for C++17 and later."
    }
  ]
}
