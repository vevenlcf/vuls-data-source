{
  "id": "1173",
  "name": "Improper Use of Validation Framework",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",
  "extended_description": "Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "20",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language."
      ]
    },
    {
      "phase": "Implementation",
      "note": [
        "This weakness may occur when developers do not correctly use a provided input validation framework."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Integrity"
      ],
      "impact": [
        "Unexpected State"
      ],
      "note": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Properly use provided input validation frameworks."
      ]
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2018-12-21T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Indirect"
    }
  ],
  "detection_methods": [
    {
      "detection_method_id": "DM-3",
      "method": "Automated Static Analysis",
      "description": "\n                  \u003cxhtml:p\u003eSome instances of improper input validation can be detected using automated static analysis.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eA static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eExcept in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.\u003c/xhtml:p\u003e\n               "
    }
  ]
}
