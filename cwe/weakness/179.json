{
  "id": "179",
  "name": "Incorrect Behavior Order: Early Validation",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",
  "extended_description": "Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "20",
      "view_id": "1000"
    },
    {
      "nature": "ChildOf",
      "cweid": "696",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "Since early validation errors usually arise from improperly implemented defensive mechanisms, it is likely that these will be introduced more frequently as secure programming becomes implemented more widely."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control",
        "Integrity"
      ],
      "impact": [
        "Bypass Protection Mechanism",
        "Execute Unauthorized Code or Commands"
      ],
      "note": "An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior."
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-20",
      "phase": [
        "Implementation"
      ],
      "description": [
        "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
      ],
      "strategy": "Input Validation"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-35",
      "text": "\n               \u003cIntro_Text\u003eThe following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\".\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString path = getInputPath();\u003cxhtml:br/\u003eif (path.startsWith(\"/safe_dir/\"))\u003cxhtml:br/\u003e{\u003cxhtml:div style=\"margin-left:10px;\"\u003eFile f = new File(path);\u003cxhtml:br/\u003ereturn f.getCanonicalPath();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\".\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eTo avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString path = getInputPath();\u003cxhtml:br/\u003eFile f = new File(path);\u003cxhtml:br/\u003eif (f.getCanonicalPath().startsWith(\"/safe_dir/\"))\u003cxhtml:br/\u003e{\u003cxhtml:div style=\"margin-left:10px;\"\u003ereturn f.getCanonicalPath();\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-36",
      "text": "\n               \u003cIntro_Text\u003eThis script creates a subdirectory within a user directory and sets the user as the owner.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"PHP\"\u003e\n                  \u003cxhtml:div\u003efunction createDir($userName,$dirName){\u003cxhtml:div style=\"margin-left:10px;\"\u003e$userDir = '/users/'. $userName;\u003cxhtml:br/\u003eif(strpos($dirName,'..') !== false){\u003cxhtml:div style=\"margin-left:10px;\"\u003eecho 'Directory name contains invalid sequence';\u003cxhtml:br/\u003ereturn;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                        \u003cxhtml:i\u003e//filter out '~' because other scripts identify user directories by this prefix\u003c/xhtml:i\u003e\n                        \u003cxhtml:br/\u003e$dirName = str_replace('~','',$dirName);\u003cxhtml:br/\u003e$newDir = $userDir . $dirName;\u003cxhtml:br/\u003emkdir($newDir, 0700);\u003cxhtml:br/\u003echown($newDir,$userName);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhile the script attempts to screen for '..' sequences, an attacker can submit a directory path including \".~.\", which will then become \"..\" after the filtering step. This allows a Path Traversal (CWE-21) attack to occur.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2002-0433",
      "description": "Product allows remote attackers to view restricted files via an HTTP request containing a \"*\" (wildcard or asterisk) character.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
    },
    {
      "reference": "CVE-2003-0332",
      "description": "Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0332"
    },
    {
      "reference": "CVE-2002-0802",
      "description": "Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0802"
    },
    {
      "reference": "CVE-2000-0191",
      "description": "Overlaps \"fakechild/../realchild\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0191"
    },
    {
      "reference": "CVE-2004-2363",
      "description": "Product checks URI for \"\u003c\" and other literal characters, but does it before hex decoding the URI, so \"%3E\" and other sequences are allowed.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2363"
    },
    {
      "reference": "CVE-2002-0934",
      "description": "Directory traversal vulnerability allows remote attackers to read or modify arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0934"
    },
    {
      "reference": "CVE-2003-0282",
      "description": "Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0282"
    }
  ],
  "references": [
    {
      "section": "Chapter 8, \"Escaping Metacharacters\", Page 439",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_organization": "Veracode",
        "modification_date": "2008-08-15T00:00:00Z",
        "modification_comment": "Suggested OWASP Top Ten 2004 mapping"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Modes_of_Introduction, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Research_Gaps"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations, Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Early Validation Errors",
        "date": "2008-04-11T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Early Validation Errors"
    }
  ],
  "related_attack_patterns": [
    "3",
    "43",
    "71"
  ],
  "notes": [
    {
      "type": "Research Gap",
      "text": "These errors are mostly reported in path traversal vulnerabilities, but the concept applies whenever validation occurs."
    }
  ]
}
