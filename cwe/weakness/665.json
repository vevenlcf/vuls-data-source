{
  "id": "665",
  "name": "Improper Initialization",
  "abstraction": "Class",
  "structure": "Simple",
  "status": "Draft",
  "description": "The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",
  "extended_description": "This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "664",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "This weakness can occur in code paths that are not well-tested, such as rare error conditions. This is because the use of uninitialized data would be noticed as a bug during frequently-used functionality."
      ]
    },
    {
      "phase": "Operation"
    }
  ],
  "likelihood_of_exploit": "Medium",
  "common_consequences": [
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Memory",
        "Read Application Data"
      ],
      "note": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party."
    },
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism"
      ],
      "note": "If security-critical decisions rely on a variable having a \"0\" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur."
    },
    {
      "scope": [
        "Availability"
      ],
      "impact": [
        "DoS: Crash, Exit, or Restart"
      ],
      "note": "The uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments."
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-3",
      "phase": [
        "Requirements"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eFor example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Language Selection"
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Avoid race conditions (CWE-362) during initialization routines."
      ]
    },
    {
      "phase": [
        "Build and Compilation"
      ],
      "description": [
        "Run or compile your software with settings that generate warnings about uninitialized variables or data."
      ]
    },
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-105",
      "text": "\n               \u003cIntro_Text\u003eHere, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eprivate boolean initialized = true;\u003cxhtml:br/\u003epublic void someMethod() {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eif (!initialized) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003e\n                                 \u003cxhtml:br/\u003e\n                                 \u003cxhtml:i\u003e// perform initialization tasks\u003c/xhtml:i\u003e\n                                 \u003cxhtml:br/\u003e...\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003einitialized = true;\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-54",
      "text": "\n               \u003cIntro_Text\u003eThe following code intends to limit certain operations to the administrator only.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Perl\"\u003e\n                  \u003cxhtml:div\u003e$username = GetCurrentUser();\u003cxhtml:br/\u003e$state = GetStateData($username);\u003cxhtml:br/\u003eif (defined($state)) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e$uid = ExtractUserID($state);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e\n                     \u003cxhtml:i\u003e# do stuff\u003c/xhtml:i\u003e\n                     \u003cxhtml:br/\u003eif ($uid == 0) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eDoAdminThings();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eIf the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-106",
      "text": "\n               \u003cIntro_Text\u003eThe following code intends to concatenate a string to a variable and print the string.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003echar str[20];\u003cxhtml:br/\u003estrcat(str, \"hello world\");\u003cxhtml:br/\u003eprintf(\"%s\", str);\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eIf a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eIf a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2001-1471",
      "description": "chain: an invalid value prevents a library file from being included, skipping initialization of key variables, leading to resultant eval injection.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471"
    },
    {
      "reference": "CVE-2008-3637",
      "description": "Improper error checking in protection mechanism produces an uninitialized variable, allowing security bypass and code execution.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3637"
    },
    {
      "reference": "CVE-2008-4197",
      "description": "Use of uninitialized memory may allow code execution.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4197"
    },
    {
      "reference": "CVE-2008-2934",
      "description": "Free of an uninitialized pointer leads to crash and possible code execution.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2934"
    },
    {
      "reference": "CVE-2007-3749",
      "description": "OS kernel does not reset a port when starting a setuid program, allowing local users to access the port and gain privileges.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3749"
    },
    {
      "reference": "CVE-2008-0063",
      "description": "Product does not clear memory contents when generating an error message, leading to information leak.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0063"
    },
    {
      "reference": "CVE-2008-0062",
      "description": "Lack of initialization triggers NULL pointer dereference or double-free.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0062"
    },
    {
      "reference": "CVE-2008-0081",
      "description": "Uninitialized variable leads to code execution in popular desktop application.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0081"
    },
    {
      "reference": "CVE-2008-3688",
      "description": "chain: Uninitialized variable leads to infinite loop.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3688"
    },
    {
      "reference": "CVE-2008-3475",
      "description": "chain: Improper initialization leads to memory corruption.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3475"
    },
    {
      "reference": "CVE-2008-5021",
      "description": "Composite: race condition allows attacker to modify an object while it is still being initialized, causing software to access uninitialized memory.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5021"
    },
    {
      "reference": "CVE-2005-1036",
      "description": "Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1036"
    },
    {
      "reference": "CVE-2008-3597",
      "description": "chain: game server can access player data structures before initialization has happened leading to NULL dereference",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3597"
    },
    {
      "reference": "CVE-2009-2692",
      "description": "chain: uninitialized function pointers can be dereferenced allowing code execution",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2692"
    },
    {
      "reference": "CVE-2009-0949",
      "description": "chain: improper initialization of memory can lead to NULL dereference",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0949"
    },
    {
      "reference": "CVE-2009-3620",
      "description": "chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3620"
    }
  ],
  "references": [
    {
      "reference_id": "REF-436",
      "author": [
        "mercy"
      ],
      "title": "Exploiting Uninitialized Data",
      "url": "http://www.felinemenace.org/~mercy/papers/UBehavior/UBehavior.zip",
      "publication_year": "2006",
      "publication_month": "--01"
    },
    {
      "reference_id": "REF-437",
      "author": [
        "Microsoft Security Vulnerability Research \u0026 Defense"
      ],
      "title": "MS08-014 : The Case of the Uninitialized Stack Variable Vulnerability",
      "url": "http://blogs.technet.com/swi/archive/2008/03/11/the-case-of-the-uninitialized-stack-variable-vulnerability.aspx",
      "publication_year": "2008",
      "publication_month": "--03",
      "publication_day": "---11"
    },
    {
      "section": "Chapter 7, \"Variable Initialization\", Page 312",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2008-04-11T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Sean Eidemiller",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "added/updated demonstrative examples"
      },
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-01-12T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Modes_of_Introduction, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Description, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-04-05T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Detection_Factors, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27T00:00:00Z",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-02-21T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2015-12-07T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated References, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Observed_Examples"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Incorrect or Incomplete Initialization",
        "date": "2009-01-12T00:00:00Z"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    },
    {
      "ordinality": "Resultant"
    }
  ],
  "detection_methods": [
    {
      "detection_method_id": "DM-2",
      "method": "Automated Dynamic Analysis",
      "description": "\n                  \u003cxhtml:p\u003eThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eInitialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\u003c/xhtml:p\u003e\n               ",
      "effectiveness": "Moderate"
    },
    {
      "detection_method_id": "DM-12",
      "method": "Manual Dynamic Analysis",
      "description": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Incorrect initialization"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Explicitly specify array bounds, even if implicitly defined by an initializer",
      "entry_id": "ARR02-C"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Prevent class initialization cycles",
      "entry_id": "DCL00-J"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Unchecked Status Condition",
      "entry_id": "SFP4"
    }
  ],
  "related_attack_patterns": [
    "26",
    "29"
  ]
}
