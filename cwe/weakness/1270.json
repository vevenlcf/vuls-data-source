{
  "id": "1270",
  "name": "Generation of Incorrect Security Tokens",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.",
  "extended_description": "\n\t\t\t\t\u003cxhtml:p\u003eSystems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be \"read\", \"write\", \"program\", \"reset\", \"fetch\", \"compute\", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.\u003c/xhtml:p\u003e\n\t\t\t",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "284",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "1294",
      "view_id": "1194",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Technology-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "operating_system": [
      {
        "class": "OS-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "architecture": [
      {
        "class": "Architecture-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Availability",
        "Access Control"
      ],
      "impact": [
        "Modify Files or Directories",
        "Execute Unauthorized Code or Commands",
        "Bypass Protection Mechanism",
        "Gain Privileges or Assume Identity",
        "Read Memory",
        "Modify Memory",
        "DoS: Crash, Exit, or Restart"
      ],
      "likelihood": "High"
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "\n\t\t\t\t\t\t\u003cxhtml:ul\u003e\n\t\t\t\t\t\t\t\u003cxhtml:li\u003eGeneration of Security Tokens should be reviewed for design inconsistency and common weaknesses.\u003c/xhtml:li\u003e\n\t\t\t\t\t\t\t\u003cxhtml:li\u003eSecurity-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.\u003c/xhtml:li\u003e\n\t\t\t\t\t\t\u003c/xhtml:ul\u003e\n\t\t\t\t\t"
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n\t\t\t\t\t\u003cIntro_Text\u003eConsider a system with a register for storing an AES key for encryption or decryption. The key is 128 bits long implemented as a set of four 32-bit registers. The key registers are assets, and register, AES_KEY_ACCESS_POLICY, is defined to provide necessary access controls. The access-policy register defines which agents, using a Security Token, may access the AES-key registers. Each bit in this 32-bit register is used to define a Security Token. There could be a maximum of 32 Security Tokens that are allowed access to the AES-key registers. When set (bit = \"1\") bit number allows action from an agent whose identity matches that bit number. If Clear (bit = \"0\") the action is disallowed for the corresponding agent.\u003c/Intro_Text\u003e\n\t\t\t\t\t\n\t\t\t\t\t\u003cBody_Text\u003eLet\"s assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\".\n\t\t\t\t\t\n\t\t\t\t\t\u003cxhtml:table\u003e\t\t\n\t\t\t\t\t\t\u003cxhtml:tr\u003e\t\t\t\n\t\t\t\t\t\t\t\u003cxhtml:th\u003eRegister\u003c/xhtml:th\u003e\n\t\t\t\t\t\t\t\u003cxhtml:th\u003eDescription\u003c/xhtml:th\u003e\n\t\t\t\t\t\t\t\u003cxhtml:th\u003eDefault\u003c/xhtml:th\u003e\n\t\t\t\t\t\t\u003c/xhtml:tr\u003e\t\t\n\t\t\t\t\t\t\u003cxhtml:tr\u003e\t\t\t\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES_ENC_DEC_KEY_0\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES key [0:31] for encryption or decryption\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003e0x00000000\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\u003c/xhtml:tr\u003e\n\t\t\t\t\t\t\u003cxhtml:tr\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES_ENC_DEC_KEY_1\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES key [32:63] for encryption or decryption\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003e0x00000000\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\u003c/xhtml:tr\u003e\t\n\t\t\t\t\t\t\u003cxhtml:tr\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES_ENC_DEC_KEY_2\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES key [64:95] for encryption or decryption\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003e0x00000000\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\u003c/xhtml:tr\u003e\t\n\t\t\t\t\t\t\u003cxhtml:tr\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES_ENC_DEC_KEY_3\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES key [96:127] for encryption or decryption\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003e0x00000000\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\u003c/xhtml:tr\u003e\t\n\t\t\t\t\t\t\u003cxhtml:tr\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES_KEY_ACCESS_POLICY\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003eAES key access register [31:0]\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\t\u003cxhtml:td\u003e0x00000002\u003c/xhtml:td\u003e\n\t\t\t\t\t\t\u003c/xhtml:tr\u003e\n\t\t\t\t\t\u003c/xhtml:table\u003e\n\t\t\t\t\u003c/Body_Text\u003e\n\t\t\t\t\t\n\t\t\t\t\t\u003cBody_Text\u003eAn agent with a Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\".\u003c/Body_Text\u003e\n\t\t\t\t\t\n\t\t\t\t\t\u003cExample_Code Nature=\"bad\" Language=\"Other\"\u003eThe SoC incorrectly generates Security Token \"1\" for every agent. In other words, both Main-controller and Aux-controller are assigned Security Token \"1\".\u003c/Example_Code\u003e\n\t\t\t\t\t\u003cBody_Text\u003eBoth agents have access to the AES-key registers.\u003c/Body_Text\u003e\n\t\t\t\t\t\u003cExample_Code Nature=\"good\" Language=\"Other\"\u003eThe SoC should correctly generate Security Tokens, assigning \"1\" to the Main-controller and \"2\" to the Aux-controller \u003c/Example_Code\u003e\n\t\t\t\t"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Arun Kanuparthi, Hareesh Khattri, Parbati Kumar Manna, Narasimha Kumar V Mangipudi",
      "submission_organization": "Intel Corporation",
      "submission_date": "2020-03-06T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Generation of Incorrect Security Identifiers",
        "date": "2020-08-20T00:00:00Z"
      }
    ]
  },
  "related_attack_patterns": [
    "121",
    "633",
    "681"
  ]
}
