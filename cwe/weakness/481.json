{
  "id": "481",
  "name": "Assigning instead of Comparing",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "The code uses an operator for assignment when the intention was to perform a comparison.",
  "extended_description": "In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "480",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "697",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "C"
      },
      {
        "prevalence": "Undetermined",
        "name": "C++"
      },
      {
        "prevalence": "Undetermined",
        "name": "Java"
      },
      {
        "prevalence": "Undetermined",
        "name": "C#"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "Low",
  "common_consequences": [
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Alter Execution Logic"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Many IDEs and static analysis products will detect this problem."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Place constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-140",
      "text": "\n               \u003cIntro_Text\u003eThe following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003eint isValid(int value) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (value=100) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Value is valid\\n\");\u003cxhtml:br/\u003ereturn(1);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eprintf(\"Value is not valid\\n\");\u003cxhtml:br/\u003ereturn(0);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C#\"\u003e\n                  \u003cxhtml:div\u003ebool isValid(int value) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (value=100) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eConsole.WriteLine(\"Value is valid.\");\u003cxhtml:br/\u003ereturn true;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eConsole.WriteLine(\"Value is not valid.\");\u003cxhtml:br/\u003ereturn false;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eHowever, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results.\u003c/Body_Text\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eIn this example, we show how assigning instead of comparing can impact code when values are being passed by reference instead of by value. Consider a scenario in which a string is being processed from user input. Assume the string has already been formatted such that different user inputs are concatenated with the colon character. When the processString function is called, the test for the colon character will result in an insertion of the colon character instead, adding new input separators. Since the string was passed by reference, the data sentinels will be inserted in the original string (CWE-464), and further processing of the inputs will be altered, possibly malformed..\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003evoid processString (char *str) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eint i;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003efor(i=0; i\u0026lt;strlen(str); i++) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (isalnum(str[i])){\u003cxhtml:div style=\"margin-left:10px;\"\u003eprocessChar(str[i]);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse if (str[i] = ':') {\u003cxhtml:div style=\"margin-left:10px;\"\u003emovingToNewInput();}\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eThe following Java example attempts to perform some processing based on the boolean value of the input parameter. However, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". As with the previous examples, the variable will be reassigned locally and the expression in the if statement will evaluate to true and unintended processing may occur.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic void checkValid(boolean isValid) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (isValid = true) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.out.println(\"Performing processing\");\u003cxhtml:br/\u003edoSomethingImportant();\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.out.println(\"Not Valid, do not perform processing\");\u003cxhtml:br/\u003ereturn;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhile most Java compilers will catch the use of an assignment operator when a comparison operator is required, for boolean variables in Java the use of the assignment operator within an expression is allowed. If possible, try to avoid using comparison operators on boolean variables in java. Instead, let the values of the variables stand for themselves, as in the following code.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic void checkValid(boolean isValid) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (isValid) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.out.println(\"Performing processing\");\u003cxhtml:br/\u003edoSomethingImportant();\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.out.println(\"Not Valid, do not perform processing\");\u003cxhtml:br/\u003ereturn;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eAlternatively, to test for false, just use the boolean NOT operator.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic void checkValid(boolean isValid) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (!isValid) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.out.println(\"Not Valid, do not perform processing\");\u003cxhtml:br/\u003ereturn;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eSystem.out.println(\"Performing processing\");\u003cxhtml:br/\u003edoSomethingImportant();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eThe following example demonstrates the weakness.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003evoid called(int foo){\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (foo=1) printf(\"foo\\n\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eint main() {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003e\n                           \u003cxhtml:br/\u003ecalled(2);\u003cxhtml:br/\u003ereturn 0;\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    },
    {
      "section": "Chapter 6, \"Typos\", Page 289",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CLASP",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Description, Relationships, Other_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Assigning instead of comparing"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Glitch in computation",
      "entry_id": "SFP1"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Do not perform assignments in selection statements",
      "entry_id": "EXP45-C",
      "mapping_fit": "CWE More Abstract"
    }
  ]
}
