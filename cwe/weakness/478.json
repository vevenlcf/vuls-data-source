{
  "id": "478",
  "name": "Missing Default Case in Switch Statement",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Draft",
  "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses.",
  "extended_description": "This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1023",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "C"
      },
      {
        "prevalence": "Undetermined",
        "name": "C++"
      },
      {
        "prevalence": "Undetermined",
        "name": "Java"
      },
      {
        "prevalence": "Undetermined",
        "name": "C#"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Integrity"
      ],
      "impact": [
        "Varies by Context",
        "Alter Execution Logic"
      ],
      "note": "Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Ensure that there are no unaccounted for cases, when adjusting flow or values based on the value of a given variable. In switch statements, this can be accomplished through the use of the default label."
      ]
    },
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "In the case of switch style statements, the very simple act of creating a default case can mitigate this situation, if done correctly. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eThe following does not properly check the return code in the case where the security_check function returns a -1 value when an error occurs. If an attacker can supply data that will invoke an error, the attacker can bypass the security check:\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003e#define FAILED 0\u003cxhtml:br/\u003e#define PASSED 1\u003cxhtml:br/\u003eint result;\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003eresult = security_check(data);\u003cxhtml:br/\u003eswitch (result) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003ecase FAILED:\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Security check failed!\\n\");\u003cxhtml:br/\u003eexit(-1);\u003cxhtml:br/\u003e\n                              \u003cxhtml:i\u003e//Break never reached because of exit()\u003c/xhtml:i\u003e\n                              \u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                           \u003cxhtml:br/\u003ecase PASSED:\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Security check passed.\\n\");\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:i\u003e// program execution continues...\u003c/xhtml:i\u003e\n                     \u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eInstead a default label should be used for unaccounted conditions:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003e#define FAILED 0\u003cxhtml:br/\u003e#define PASSED 1\u003cxhtml:br/\u003eint result;\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003eresult = security_check(data);\u003cxhtml:br/\u003eswitch (result) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003ecase FAILED:\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Security check failed!\\n\");\u003cxhtml:br/\u003eexit(-1);\u003cxhtml:br/\u003e\n                              \u003cxhtml:i\u003e//Break never reached because of exit()\u003c/xhtml:i\u003e\n                              \u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                           \u003cxhtml:br/\u003ecase PASSED:\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Security check passed.\\n\");\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                           \u003cxhtml:br/\u003edefault:\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Unknown error (%d), exiting...\\n\",result);\u003cxhtml:br/\u003eexit(-1);\u003c/xhtml:div\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis label is used because the assumption cannot be made that all possible cases are accounted for. A good practice is to reserve the default case for error handling.\u003c/Body_Text\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eIn the following Java example the method getInterestRate retrieves the interest rate for the number of points for a mortgage. The number of points is provided within the input parameter and a switch statement will set the interest rate value to be returned based on the number of points.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic static final String INTEREST_RATE_AT_ZERO_POINTS = \"5.00\";\u003cxhtml:br/\u003epublic static final String INTEREST_RATE_AT_ONE_POINTS = \"4.75\";\u003cxhtml:br/\u003epublic static final String INTEREST_RATE_AT_TWO_POINTS = \"4.50\";\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003epublic BigDecimal getInterestRate(int points) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eBigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eswitch (points) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003ecase 0:\u003cxhtml:div style=\"margin-left:10px;\"\u003eresult = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                                 \u003cxhtml:br/\u003ecase 1:\u003cxhtml:div style=\"margin-left:10px;\"\u003eresult = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS);\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                                 \u003cxhtml:br/\u003ecase 2:\u003cxhtml:div style=\"margin-left:10px;\"\u003eresult = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS);\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                              \u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003ereturn result;\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eHowever, this code assumes that the value of the points input parameter will always be 0, 1 or 2 and does not check for other incorrect values passed to the method. This can be easily accomplished by providing a default label in the switch statement that outputs an error message indicating an invalid value for the points input parameter and returning a null value.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic static final String INTEREST_RATE_AT_ZERO_POINTS = \"5.00\";\u003cxhtml:br/\u003epublic static final String INTEREST_RATE_AT_ONE_POINTS = \"4.75\";\u003cxhtml:br/\u003epublic static final String INTEREST_RATE_AT_TWO_POINTS = \"4.50\";\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003epublic BigDecimal getInterestRate(int points) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eBigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eswitch (points) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003ecase 0:\u003cxhtml:div style=\"margin-left:10px;\"\u003eresult = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                                 \u003cxhtml:br/\u003ecase 1:\u003cxhtml:div style=\"margin-left:10px;\"\u003eresult = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS);\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                                 \u003cxhtml:br/\u003ecase 2:\u003cxhtml:div style=\"margin-left:10px;\"\u003eresult = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS);\u003cxhtml:br/\u003ebreak;\u003c/xhtml:div\u003e\n                                 \u003cxhtml:br/\u003edefault:\u003cxhtml:div style=\"margin-left:10px;\"\u003eSystem.err.println(\"Invalid value for points, must be 0, 1 or 2\");\u003cxhtml:br/\u003eSystem.err.println(\"Returning null value for interest rate\");\u003cxhtml:br/\u003eresult = null;\u003c/xhtml:div\u003e\n                              \u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003ereturn result;\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    },
    {
      "section": "Chapter 7, \"Switch Statements\", Page 337",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CLASP",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Common_Consequences, Description, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Description, Name"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23T00:00:00Z",
        "modification_comment": "updated Description, Other_Notes, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated References, Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Failure to Account for Default Case in Switch",
        "date": "2008-04-11T00:00:00Z"
      },
      {
        "text": "Failure to Use Default Case in Switch",
        "date": "2009-05-27T00:00:00Z"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Failure to account for default case in switch"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Unchecked Status Condition",
      "entry_id": "SFP4"
    }
  ]
}
