{
  "id": "194",
  "name": "Unexpected Sign Extension",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "681",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "681",
      "view_id": "1305",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "681",
      "view_id": "1340",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "C"
      },
      {
        "prevalence": "Undetermined",
        "name": "C++"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "High",
  "common_consequences": [
    {
      "scope": [
        "Integrity",
        "Confidentiality",
        "Availability",
        "Other"
      ],
      "impact": [
        "Read Memory",
        "Modify Memory",
        "Other"
      ],
      "note": "When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-23",
      "text": "\n               \u003cIntro_Text\u003eThe following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003eint GetUntrustedInt () {\u003cxhtml:div style=\"margin-left:10px;\"\u003ereturn(0x0000FFFF);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003evoid main (int argc, char **argv) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003echar path[256];\u003cxhtml:br/\u003echar *input;\u003cxhtml:br/\u003eint i;\u003cxhtml:br/\u003eshort s;\u003cxhtml:br/\u003eunsigned int sz;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003ei = GetUntrustedInt();\u003cxhtml:br/\u003es = i;\u003cxhtml:br/\u003e/* s is -1 so it passes the safety check - CWE-697 */\u003cxhtml:br/\u003eif (s \u0026gt; 256) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eDiePainfully(\"go away!\\n\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e/* s is sign-extended and saved in sz */\u003cxhtml:br/\u003esz = s;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */\u003cxhtml:br/\u003eprintf(\"i=%d, s=%d, sz=%u\\n\", i, s, sz);\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003einput = GetUserInput(\"Enter pathname:\");\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003e/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\u003cxhtml:br/\u003e(CWE-195), enabling buffer overflow (CWE-119) */\u003cxhtml:br/\u003estrncpy(path, input, s);\u003cxhtml:br/\u003epath[255] = '\\0'; /* don't want CWE-170 */\u003cxhtml:br/\u003eprintf(\"Path is: %s\\n\", path);\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis code first exhibits an example of CWE-839, allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119).\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2018-10887",
      "description": "Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10887"
    },
    {
      "reference": "CVE-1999-0234",
      "description": "Sign extension error produces -1 value that is treated as a command separator, enabling OS command injection.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0234"
    },
    {
      "reference": "CVE-2003-0161",
      "description": "Product uses \"char\" type for input character. When char is implemented as a signed type, ASCII value 0xFF (255), a sign extension produces a -1 value that is treated as a program-specific separator value, effectively disabling a length check and leading to a buffer overflow. This is also a multiple interpretation error.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0161"
    },
    {
      "reference": "CVE-2007-4988",
      "description": "chain: signed short width value in image processor is sign extended during conversion to unsigned int, which leads to integer overflow and heap-based buffer overflow.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4988"
    },
    {
      "reference": "CVE-2006-1834",
      "description": "chain: signedness error allows bypass of a length check; later sign extension makes exploitation easier.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1834"
    },
    {
      "reference": "CVE-2005-2753",
      "description": "Sign extension when manipulating Pascal-style strings leads to integer overflow and improper memory copy.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2753"
    }
  ],
  "references": [
    {
      "reference_id": "REF-161",
      "author": [
        "John McDonald",
        "Mark Dowd",
        "Justin Schuh"
      ],
      "title": "C Language Issues for Application Security",
      "url": "http://www.informit.com/articles/article.aspx?p=686170\u0026seqNum=6",
      "publication_year": "2008",
      "publication_month": "--01",
      "publication_day": "---25"
    },
    {
      "reference_id": "REF-162",
      "author": [
        "Robert Seacord"
      ],
      "title": "Integral Security",
      "url": "http://www.ddj.com/security/193501774",
      "publication_year": "2006",
      "publication_month": "--11",
      "publication_day": "---03"
    },
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CLASP",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Common_Consequences, Description, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-05T00:00:00Z",
        "modification_comment": "complete rewrite of the entire entry"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Description, Maintenance_Notes, Name, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-10-29T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-04-05T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated References, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, References"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Sign Extension Error",
        "date": "2008-04-11T00:00:00Z"
      },
      {
        "text": "Incorrect Sign Extension",
        "date": "2008-11-24T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Sign extension error"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Glitch in computation",
      "entry_id": "SFP1"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Ensure that integer conversions do not result in lost or misinterpreted data",
      "entry_id": "INT31-C",
      "mapping_fit": "CWE More Specific"
    }
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "Sign extension errors can lead to buffer overflows and other memory-based problems. They are also likely to be factors in other weaknesses that are not based on memory operations, but rely on numeric calculation."
    },
    {
      "type": "Maintenance",
      "text": "This entry is closely associated with signed-to-unsigned conversion errors (CWE-195) and other numeric errors. These relationships need to be more closely examined within CWE."
    }
  ]
}
