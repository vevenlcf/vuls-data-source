{
  "id": "290",
  "name": "Authentication Bypass by Spoofing",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "287",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "287",
      "view_id": "1003",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {},
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."
      ]
    },
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism",
        "Gain Privileges or Assume Identity"
      ],
      "note": "This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication."
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eThe following code authenticates users.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString sourceIP = request.getRemoteAddr();\u003cxhtml:br/\u003eif (sourceIP != null \u0026amp;\u0026amp; sourceIP.equals(APPROVED_IP)) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eauthenticated = true;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-99",
      "text": "\n               \u003cIntro_Text\u003eBoth of these examples check if a request is from a trusted address before responding to the request.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003esd = socket(AF_INET, SOCK_DGRAM, 0);\u003cxhtml:br/\u003eserv.sin_family = AF_INET;\u003cxhtml:br/\u003eserv.sin_addr.s_addr = htonl(INADDR_ANY);\u003cxhtml:br/\u003eservr.sin_port = htons(1008);\u003cxhtml:br/\u003ebind(sd, (struct sockaddr *) \u0026amp; serv, sizeof(serv));\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003ewhile (1) {\u003cxhtml:div style=\"margin-left:10px;\"\u003ememset(msg, 0x0, MAX_MSG);\u003cxhtml:br/\u003eclilen = sizeof(cli);\u003cxhtml:br/\u003eif (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {\u003cxhtml:div style=\"margin-left:10px;\"\u003en = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) \u0026amp; cli, \u0026amp;clilen);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003ewhile(true) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eDatagramPacket rp=new DatagramPacket(rData,rData.length);\u003cxhtml:br/\u003eoutSock.receive(rp);\u003cxhtml:br/\u003eString in = new String(p.getData(),0, rp.getLength());\u003cxhtml:br/\u003eInetAddress clientIPAddress = rp.getAddress();\u003cxhtml:br/\u003eint port = rp.getPort();\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (isTrustedAddress(clientIPAddress) \u0026amp; secretKey.equals(in)) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eout = secret.getBytes();\u003cxhtml:br/\u003eDatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-93",
      "text": "\n               \u003cIntro_Text\u003eThe following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003estruct hostent *hp;struct in_addr myaddr;\u003cxhtml:br/\u003echar* tHost = \"trustme.example.com\";\u003cxhtml:br/\u003emyaddr.s_addr=inet_addr(ip_addr_string);\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003ehp = gethostbyaddr((char *) \u0026amp;myaddr, sizeof(struct in_addr), AF_INET);\u003cxhtml:br/\u003eif (hp \u0026amp;\u0026amp; !strncmp(hp-\u0026gt;h_name, tHost, sizeof(tHost))) {\u003cxhtml:div style=\"margin-left:10px;\"\u003etrusted = true;\u003c/xhtml:div\u003e} else {\u003cxhtml:div style=\"margin-left:10px;\"\u003etrusted = false;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString ip = request.getRemoteAddr();\u003cxhtml:br/\u003eInetAddress addr = InetAddress.getByName(ip);\u003cxhtml:br/\u003eif (addr.getCanonicalHostName().endsWith(\"trustme.com\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003etrusted = true;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C#\"\u003e\n                  \u003cxhtml:div\u003eIPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);\u003cxhtml:br/\u003eIPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);\u003cxhtml:br/\u003eif (hostInfo.HostName.EndsWith(\"trustme.com\")) {\u003cxhtml:div style=\"margin-left:10px;\"\u003etrusted = true;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eIP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2009-1048",
      "description": "VOIP product allows authentication bypass using 127.0.0.1 in the Host header.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1048"
    }
  ],
  "references": [
    {
      "section": "Chapter 3, \"Spoofing and Identification\", Page 72",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Sean Eidemiller",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "added/updated demonstrative examples"
      },
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Description, Relationships, Relationship_Notes, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Relationship_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-07-17T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-02-18T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-05-03T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Modes_of_Introduction, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Authentication bypass by spoofing"
    }
  ],
  "related_attack_patterns": [
    "21",
    "22",
    "459",
    "461",
    "473",
    "476",
    "59",
    "60",
    "667",
    "94"
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "This can be resultant from insufficient verification."
    }
  ]
}
