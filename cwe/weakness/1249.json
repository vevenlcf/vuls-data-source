{
  "id": "1249",
  "name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",
  "extended_description": "\n                \u003cxhtml:p\u003eMany products provide web-based applications or other software for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems.  When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise.\u003c/xhtml:p\u003e\n\t\t\t\t\u003cxhtml:p\u003eFor example, numerous systems utilize a web\n\t\t\t\tfront-end for administrative control. They also offer\n\t\t\t\tthe ability to add, alter, and drop users with various\n\t\t\t\tprivileges as it relates to the functionality of the\n\t\t\t\tsystem.  A potential architectural weakness may exist\n\t\t\t\twhere the user information reflected in the web\n\t\t\t\tinterface does not mirror the users in the underlying\n\t\t\t\toperating system.  Many web UI or REST APIs use the\n\t\t\t\tunderlying operating system for authentication; the\n\t\t\t\tsystem's logic may also track an additional set of\n\t\t\t\tuser capabilities within configuration files\n\t\t\t\tand datasets for authorization capabilities. When\n\t\t\t\tthere is a discrepancy between the user information in\n\t\t\t\tthe UI or REST API's interface system and the\n\t\t\t\tunderlying operating system's user listing, this may\n\t\t\t\tintroduce a weakness into the system.  For example, if an\n\t\t\t\tattacker compromises the OS and adds a new user\n\t\t\t\taccount - a \"ghost\" account - then the attacker could escape detection if\n\t\t\t\tthe management tool does not list the newly-added\n\t\t\t\taccount.\u003c/xhtml:p\u003e\n\t\t\t\t\u003cxhtml:p\u003eThis discrepancy could be exploited in several ways:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                    \u003cxhtml:ul\u003e\n\t\t\t\t\t  \u003cxhtml:li\u003eA rogue admin could insert a new account into a system that will\npersist if they are terminated or wish to take action on a system that\ncannot be directly associated with them.\u003c/xhtml:li\u003e\n\t\t\t\t\t  \u003cxhtml:li\u003eAn attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh.\u003c/xhtml:li\u003e\n\t\t\t\t\t  \u003cxhtml:li\u003eAn attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all.\u003c/xhtml:li\u003e\n\t\t\t\t\t  \u003cxhtml:li\u003eAn attacker could create an admin\n\t\t\t\t\t  account which is viewable by an administrator,\n\t\t\t\t\t  use this account to create the ghost account,\n\t\t\t\t\t  delete logs and delete the first created admin\n\t\t\t\t\t  account.\u003c/xhtml:li\u003e\n                    \u003c/xhtml:ul\u003e\n\t\t\t\t  \u003c/xhtml:div\u003e\n\t\t\t\t\u003cxhtml:p\u003eMany of these attacker scenarios can be\n\t\t\t\trealized by leveraging separate vulnerabilities\n\t\t\t\trelated to XSS, command injection, authentication\n\t\t\t\tbypass, or logic flaws on the various systems.\n\t\t\t\t\u003c/xhtml:p\u003e\n            ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "1250",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "class": "Web Based",
        "prevalence": "Undetermined"
      }
    ],
    "operating_system": [
      {
        "class": "OS-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "The design might assume that the underlying OS does not change."
      ]
    },
    {
      "phase": "Implementation",
      "note": [
        "Assumptions about the underlying OS might be hard-coded into the application or otherwise in external data stores in a way that is not updated when the OS's state changes."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Varies by Context"
      ]
    },
    {
      "scope": [
        "Accountability"
      ],
      "impact": [
        "Hide Activities"
      ]
    },
    {
      "scope": [
        "Other"
      ],
      "impact": [
        "Unexpected State"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                        \u003cxhtml:p\u003eEnsure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\u003c/xhtml:p\u003e                     \n                    "
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n                    \u003cIntro_Text\u003eSuppose that an attacker successfully gains root privileges on a Linux system and adds a new 'user2' account:\u003c/Intro_Text\u003e\n                    \u003cExample_Code Nature=\"attack\" Language=\"Other\"\u003e\n\t\t\t\t\t  \u003cxhtml:div\u003eecho \"user2:x:0:0::/root:/\" \u0026gt;\u0026gt; /etc/passwd;\u003c/xhtml:div\u003e\n\t\t\t\t\t  \u003cxhtml:div\u003eecho\n\t\t\t\t\t  \"user2:\\$6\\$IdvyrM6VJnG8Su5U\\$1gmW3Nm.IO4vxTQDQ1C8urm72JCadOHZQwqiH/nRtL8dPY80xS4Ovsv5bPCMWnXKKWwmsocSWXupUf17LB3oS.:17256:0:99999:7:::\" \u0026gt;\u0026gt; /etc/shadow;\u003c/xhtml:div\u003e\n                    \u003c/Example_Code\u003e\n                    \u003cBody_Text\u003eThis new user2 account would not be noticed on the web interface, if the interface does not refresh its data of available users.\u003c/Body_Text\u003e\n\n\t\t\t\t\t\u003cBody_Text\u003eIt could be argued that for this specific example, an attacker with root privileges would be likely to compromise the admin tool or otherwise feed it with false data.  However, this example shows how the discrepancy in critical data can help attackers to escape detection.\u003c/Body_Text\u003e\n            \t"
    }
  ],
  "references": [
    {
      "reference_id": "REF-1070",
      "author": [
        "Tony Martin"
      ],
      "title": "Ghost in the Shell Weakness",
      "url": "http://www.friendsglobal.com/ghost-in-the-shell/ghost-in-the-shell-weakness/",
      "publication_year": "2020",
      "publication_month": "--02",
      "publication_day": "---13"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Tony Martin",
      "submission_date": "2019-06-06T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      }
    ]
  },
  "alternate_terms": [
    {
      "term": "Ghost in the Shell"
    }
  ]
}
