{
  "id": "943",
  "name": "Improper Neutralization of Special Elements in Data Query Logic",
  "abstraction": "Class",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
  "extended_description": "\n            \u003cxhtml:p\u003eDepending on the capabilities of the query language, an attacker could inject additional logic into the query to:\u003c/xhtml:p\u003e\n            \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n               \u003cxhtml:ul\u003e\n                  \u003cxhtml:li\u003eModify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated\u003c/xhtml:li\u003e\n                  \u003cxhtml:li\u003eAppend additional commands to the query\u003c/xhtml:li\u003e\n                  \u003cxhtml:li\u003eReturn more entities than intended\u003c/xhtml:li\u003e\n                  \u003cxhtml:li\u003eReturn fewer entities than intended\u003c/xhtml:li\u003e\n                  \u003cxhtml:li\u003eCause entities to be sorted in an unexpected way\u003c/xhtml:li\u003e\n               \u003c/xhtml:ul\u003e\n            \u003c/xhtml:div\u003e\n            \u003cxhtml:p\u003eThe ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eWhile this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages.\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "74",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "REALIZATION: This weakness is caused during implementation of an architectural security tactic."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Availability",
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism",
        "Read Application Data",
        "Modify Application Data",
        "Varies by Context"
      ]
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2014-2503",
      "description": "Injection using Documentum Query Language (DQL)",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2503"
    },
    {
      "reference": "CVE-2014-2508",
      "description": "Injection using Documentum Query Language (DQL)",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2508"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2014-06-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2015-12-07T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Modes_of_Introduction, Observed_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Maintenance_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-04-28T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      }
    ]
  },
  "related_attack_patterns": [
    "676"
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "It could be argued that data query languages are effectively a command language - albeit with a limited set of commands - and thus any query-language injection issue could be treated as a child of CWE-74. However, CWE-943 is intended to better organize query-oriented issues to separate them from fully-functioning programming languages, and also to provide a more precise identifier for the many query languages that do not have their own CWE identifier."
    }
  ]
}
