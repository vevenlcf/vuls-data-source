{
  "id": "642",
  "name": "External Control of Critical State Data",
  "abstraction": "Class",
  "structure": "Simple",
  "status": "Draft",
  "description": "The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors.",
  "extended_description": "\n            \u003cxhtml:p\u003eIf an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eState information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication.\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "668",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ],
    "technology": [
      {
        "prevalence": "Often",
        "name": "Web Server"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design",
      "note": [
        "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."
      ]
    },
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "High",
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism",
        "Gain Privileges or Assume Identity"
      ],
      "note": "An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges."
    },
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Application Data"
      ],
      "note": "The state variables may contain sensitive information that should not be known by the client."
    },
    {
      "scope": [
        "Availability"
      ],
      "impact": [
        "DoS: Crash, Exit, or Restart"
      ],
      "note": "By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked."
      ]
    },
    {
      "mitigation_id": "MIT-14",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eStore state information and sensitive data on the server side only.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eEnsure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eIf information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Attack Surface Reduction"
    },
    {
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions."
      ]
    },
    {
      "mitigation_id": "MIT-4",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWith a stateless protocol such as HTTP, use some frameworks can maintain the state for you.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eExamples include ASP.NET View State and the OWASP ESAPI Session Management feature.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eBe careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Libraries or Frameworks"
    },
    {
      "mitigation_id": "MIT-15",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
      ]
    },
    {
      "mitigation_id": "MIT-16",
      "phase": [
        "Operation",
        "Implementation"
      ],
      "description": [
        "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
      ],
      "strategy": "Environment Hardening"
    },
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
      ]
    },
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
      ]
    },
    {
      "phase": [
        "Testing"
      ],
      "description": [
        "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eIn the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eCookie[] cookies = request.getCookies();\u003cxhtml:br/\u003efor (int i =0; i\u0026lt; cookies.length; i++) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eCookie c = cookies[i];\u003cxhtml:br/\u003eif (c.getName().equals(\"authenticated\") \u0026amp;\u0026amp; Boolean.TRUE.equals(c.getValue())) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eauthenticated = true;\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-65",
      "text": "\n               \u003cIntro_Text\u003eThe following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files (CWE-22).\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString rName = request.getParameter(\"reportName\");\u003cxhtml:br/\u003eFile rFile = new File(\"/usr/local/apfr/reports/\" + rName);\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003erFile.delete();\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-66",
      "text": "\n               \u003cIntro_Text\u003eThe following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003efis = new FileInputStream(cfg.getProperty(\"sub\")+\".txt\");\u003cxhtml:br/\u003eamt = fis.read(arr);\u003cxhtml:br/\u003eout.println(arr);\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-67",
      "text": "\n               \u003cIntro_Text\u003eThis program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003e#define DIR \"/restricted/directory\"\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003echar cmd[500];\u003cxhtml:br/\u003esprintf(cmd, \"ls -l %480s\", DIR);\u003cxhtml:br/\u003e\n                     \u003cxhtml:i\u003e/* Raise privileges to those needed for accessing DIR. */\u003c/xhtml:i\u003e\n                     \u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eRaisePrivileges(...);\u003cxhtml:br/\u003esystem(cmd);\u003cxhtml:br/\u003eDropPrivileges(...);\u003cxhtml:br/\u003e...\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eHowever, because the program does not modify the PATH environment variable, the following attack would work:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:ul\u003e\n                     \u003cxhtml:li\u003eThe user sets the PATH to reference a directory under the attacker's control, such as \"/my/dir/\".\u003c/xhtml:li\u003e\n                     \u003cxhtml:li\u003eThe attacker creates a malicious program called \"ls\", and puts that program in /my/dir\u003c/xhtml:li\u003e\n                     \u003cxhtml:li\u003eThe user executes the program.\u003c/xhtml:li\u003e\n                     \u003cxhtml:li\u003eWhen system() is executed, the shell consults the PATH to find the ls program\u003c/xhtml:li\u003e\n                     \u003cxhtml:li\u003eThe program finds the attacker's malicious program, \"/my/dir/ls\". It doesn't find \"/bin/ls\" because PATH does not contain \"/bin/\".\u003c/xhtml:li\u003e\n                     \u003cxhtml:li\u003eThe program executes the attacker's malicious program with the raised privileges.\u003c/xhtml:li\u003e\n                  \u003c/xhtml:ul\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eThe following code segment implements a basic server that uses the \"ls\" program to perform a directory listing of the directory that is listed in the \"HOMEDIR\" environment variable. The code intends to allow the user to specify an alternate \"LANG\" environment variable. This causes \"ls\" to customize its output based on a given language, which is an important capability when supporting internationalization.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Perl\"\u003e\n                  \u003cxhtml:div\u003e$ENV{\"HOMEDIR\"} = \"/home/mydir/public/\";\u003cxhtml:br/\u003emy $stream = AcceptUntrustedInputStream();\u003cxhtml:br/\u003ewhile (\u0026lt;$stream\u0026gt;) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003echomp;\u003cxhtml:br/\u003eif (/^ENV ([\\w\\_]+) (.*)/) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e$ENV{$1} = $2;\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelsif (/^QUIT/) { ... }\u003cxhtml:br/\u003eelsif (/^LIST/) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eopen($fh, \"/bin/ls -l $ENV{HOMEDIR}|\");\u003cxhtml:br/\u003ewhile (\u0026lt;$fh\u0026gt;) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eSendOutput($stream, \"FILEINFO: $_\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eclose($fh);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe programmer takes care to call a specific \"ls\" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as \"ENV HOMEDIR /secret/directory\" to specify an alternate directory, enabling a path traversal attack (CWE-22). At the same time, other attacks are enabled as well, such as OS command injection (CWE-78) by setting HOMEDIR to a value such as \"/tmp; rm -rf /\". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be an allowlist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eWhile this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2005-2428",
      "description": "Mail client stores password hashes for unrelated accounts in a hidden form field.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2428"
    },
    {
      "reference": "CVE-2008-0306",
      "description": "Privileged program trusts user-specified environment variable to modify critical configuration settings.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0306"
    },
    {
      "reference": "CVE-1999-0073",
      "description": "Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0073"
    },
    {
      "reference": "CVE-2007-4432",
      "description": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4432"
    },
    {
      "reference": "CVE-2006-7191",
      "description": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7191"
    },
    {
      "reference": "CVE-2008-5738",
      "description": "Calendar application allows bypass of authentication by setting a certain cookie value to 1.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5738"
    },
    {
      "reference": "CVE-2008-5642",
      "description": "Setting of a language preference in a cookie enables path traversal attack.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5642"
    },
    {
      "reference": "CVE-2008-5125",
      "description": "Application allows admin privileges by setting a cookie value to \"admin.\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5125"
    },
    {
      "reference": "CVE-2008-5065",
      "description": "Application allows admin privileges by setting a cookie value to \"admin.\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5065"
    },
    {
      "reference": "CVE-2008-4752",
      "description": "Application allows admin privileges by setting a cookie value to \"admin.\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4752"
    },
    {
      "reference": "CVE-2000-0102",
      "description": "Shopping cart allows price modification via hidden form field.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0102"
    },
    {
      "reference": "CVE-2000-0253",
      "description": "Shopping cart allows price modification via hidden form field.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0253"
    },
    {
      "reference": "CVE-2008-1319",
      "description": "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1319"
    }
  ],
  "references": [
    {
      "reference_id": "REF-528",
      "author": [
        "OWASP"
      ],
      "title": "Top 10 2007-Insecure Direct Object Reference",
      "url": "http://www.owasp.org/index.php/Top_10_2007-A4",
      "publication_year": "2007"
    },
    {
      "reference_id": "REF-529",
      "title": "HMAC",
      "url": "http://en.wikipedia.org/wiki/Hmac",
      "publication_year": "2011",
      "publication_month": "--08",
      "publication_day": "---18",
      "publisher": "Wikipedia"
    },
    {
      "section": "\"Sin 4: Use of Magic URLs, Predictable Cookies, and Hidden Form\n                  Fields.\" Page 75",
      "reference_id": "REF-44",
      "author": [
        "Michael Howard",
        "David LeBlanc",
        "John Viega"
      ],
      "title": "24 Deadly Sins of Software Security",
      "publication_year": "2010",
      "publication": "McGraw-Hill"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "Evgeny Lebanidze",
      "submission_organization": "Cigital",
      "submission_date": "2008-01-30T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Sean Eidemiller",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "added/updated demonstrative examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-01-12T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Relevant_Properties, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-02-18T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Modes_of_Introduction, References, Relationships, Relevant_Properties"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Insufficient Management of User State",
        "date": "2008-04-11T00:00:00Z"
      },
      {
        "text": "External Control of User State Data",
        "date": "2009-01-12T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Exposed Data",
      "entry_id": "SFP23"
    }
  ],
  "related_attack_patterns": [
    "21",
    "31"
  ]
}
