{
  "id": "22",
  "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
  "abstraction": "Base",
  "structure": "Simple",
  "status": "Stable",
  "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
  "extended_description": "\n            \u003cxhtml:p\u003eMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.\u003c/xhtml:p\u003e\n            \u003cxhtml:p\u003eIn many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\u003c/xhtml:p\u003e\n         ",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "706",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "706",
      "view_id": "1003",
      "ordinal": "Primary"
    },
    {
      "nature": "ChildOf",
      "cweid": "668",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Architecture and Design"
    },
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "High",
  "common_consequences": [
    {
      "scope": [
        "Integrity",
        "Confidentiality",
        "Availability"
      ],
      "impact": [
        "Execute Unauthorized Code or Commands"
      ],
      "note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."
    },
    {
      "scope": [
        "Integrity"
      ],
      "impact": [
        "Modify Files or Directories"
      ],
      "note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."
    },
    {
      "scope": [
        "Confidentiality"
      ],
      "impact": [
        "Read Files or Directories"
      ],
      "note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."
    },
    {
      "scope": [
        "Availability"
      ],
      "impact": [
        "DoS: Crash, Exit, or Restart"
      ],
      "note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software."
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-5.1",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Input Validation"
    },
    {
      "mitigation_id": "MIT-15",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."
      ]
    },
    {
      "mitigation_id": "MIT-20.1",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:ul\u003e\n                        \u003cxhtml:li\u003erealpath() in C\u003c/xhtml:li\u003e\n                        \u003cxhtml:li\u003egetCanonicalPath() in Java\u003c/xhtml:li\u003e\n                        \u003cxhtml:li\u003eGetFullPath() in ASP.NET\u003c/xhtml:li\u003e\n                        \u003cxhtml:li\u003erealpath() or abs_path() in Perl\u003c/xhtml:li\u003e\n                        \u003cxhtml:li\u003erealpath() in PHP\u003c/xhtml:li\u003e\n                     \u003c/xhtml:ul\u003e\n                  \u003c/xhtml:div\u003e\n               "
      ],
      "strategy": "Input Validation"
    },
    {
      "mitigation_id": "MIT-4",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."
      ],
      "strategy": "Libraries or Frameworks"
    },
    {
      "mitigation_id": "MIT-29",
      "phase": [
        "Operation"
      ],
      "description": [
        "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth."
      ],
      "effectiveness": "Moderate",
      "effectiveness_notes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
      "strategy": "Firewall"
    },
    {
      "mitigation_id": "MIT-17",
      "phase": [
        "Architecture and Design",
        "Operation"
      ],
      "description": [
        "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
      ],
      "strategy": "Environment Hardening"
    },
    {
      "mitigation_id": "MIT-21.1",
      "phase": [
        "Architecture and Design"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Enforcement by Conversion"
    },
    {
      "mitigation_id": "MIT-22",
      "phase": [
        "Architecture and Design",
        "Operation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eBe careful to avoid CWE-243 and other weaknesses related to jails.\u003c/xhtml:p\u003e\n               "
      ],
      "effectiveness": "Limited",
      "effectiveness_notes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
      "strategy": "Sandbox or Jail"
    },
    {
      "mitigation_id": "MIT-34",
      "phase": [
        "Architecture and Design",
        "Operation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\u003c/xhtml:p\u003e\n               "
      ],
      "strategy": "Attack Surface Reduction"
    },
    {
      "mitigation_id": "MIT-39",
      "phase": [
        "Implementation"
      ],
      "description": [
        "\n                  \u003cxhtml:p\u003eEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\u003c/xhtml:p\u003e\n\t\t  \u003cxhtml:p\u003eAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\u003c/xhtml:p\u003e\n                  \u003cxhtml:p\u003eIn the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.\u003c/xhtml:p\u003e\n               "
      ]
    },
    {
      "mitigation_id": "MIT-16",
      "phase": [
        "Operation",
        "Implementation"
      ],
      "description": [
        "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."
      ],
      "strategy": "Environment Hardening"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-27",
      "text": "\n               \u003cIntro_Text\u003eThe following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Perl\"\u003e\n                  \u003cxhtml:div\u003emy $dataPath = \"/users/cwe/profiles\";\u003cxhtml:br/\u003emy $username = param(\"user\");\u003cxhtml:br/\u003emy $profilePath = $dataPath . \"/\" . $username;\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eopen(my $fh, \"\u0026lt;$profilePath\") || ExitError(\"profile read error: $profilePath\");\u003cxhtml:br/\u003eprint \"\u0026lt;ul\u0026gt;\\n\";\u003cxhtml:br/\u003ewhile (\u0026lt;$fh\u0026gt;) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprint \"\u0026lt;li\u0026gt;$_\u0026lt;/li\u0026gt;\\n\";\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eprint \"\u0026lt;/ul\u0026gt;\\n\";\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhile the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003e../../../etc/passwd\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe program would generate a profile pathname like this:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"result\"\u003e\n                  \u003cxhtml:div\u003e/users/cwe/profiles/../../../etc/passwd\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhen the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"result\"\u003e\n                  \u003cxhtml:div\u003e/etc/passwd\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eAs a result, the attacker could read the entire text of the password file.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eNotice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-18",
      "text": "\n               \u003cIntro_Text\u003eIn the example below, the path to a dictionary file is read from a system property and used to initialize a File object.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString filename = System.getProperty(\"com.domain.application.dictionaryFile\");\u003cxhtml:br/\u003eFile dictionaryFile = new File(filename);\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eHowever, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-2",
      "text": "\n               \u003cIntro_Text\u003eThe following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Perl\"\u003e\n                  \u003cxhtml:div\u003emy $Username = GetUntrustedInput();\u003cxhtml:br/\u003e$Username =~ s/\\.\\.\\///;\u003cxhtml:br/\u003emy $filename = \"/home/user/\" . $Username;\u003cxhtml:br/\u003eReadAndSendFile($filename);\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eSince the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003e../../../etc/passwd\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003ewill have the first \"../\" stripped, resulting in:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"result\"\u003e\n                  \u003cxhtml:div\u003e../../etc/passwd\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis value is then concatenated with the /home/user/ directory:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"result\"\u003e\n                  \u003cxhtml:div\u003e/home/user/../../etc/passwd\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003ewhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).\u003c/Body_Text\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eThe following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\".\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString path = getInputPath();\u003cxhtml:br/\u003eif (path.startsWith(\"/safe_dir/\"))\u003cxhtml:br/\u003e{\u003cxhtml:div style=\"margin-left:10px;\"\u003eFile f = new File(path);\u003cxhtml:br/\u003ef.delete()\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eAn attacker could provide an input such as this:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003e/safe_dir/../important.dat\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe software assumes that the path is valid because it starts with the \"/safe_path/\" sequence, but the \"../\" sequence will cause the program to delete the important.dat file in the parent directory\u003c/Body_Text\u003e\n            "
    },
    {
      "demonstrative_example_id": "DX-22",
      "text": "\n               \u003cIntro_Text\u003eThe following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"HTML\"\u003e\n                  \u003cxhtml:div\u003e\u0026lt;form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\"\u0026gt;\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eChoose a file to upload:\u003cxhtml:br/\u003e\u0026lt;input type=\"file\" name=\"filename\"/\u0026gt;\u003cxhtml:br/\u003e\u0026lt;br/\u0026gt;\u003cxhtml:br/\u003e\u0026lt;input type=\"submit\" name=\"submit\" value=\"Submit\"/\u0026gt;\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e\u0026lt;/form\u0026gt;\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eWhen submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003epublic class FileUploadServlet extends HttpServlet {\u003cxhtml:br/\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003e...\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\u003cxhtml:br/\u003e\n                           \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                              \u003cxhtml:div\u003eresponse.setContentType(\"text/html\");\u003cxhtml:br/\u003ePrintWriter out = response.getWriter();\u003cxhtml:br/\u003eString contentType = request.getContentType();\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003e// the starting position of the boundary header\u003cxhtml:br/\u003eint ind = contentType.indexOf(\"boundary=\");\u003cxhtml:br/\u003eString boundary = contentType.substring(ind+9);\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003eString pLine = new String();\u003cxhtml:br/\u003eString uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\u003cxhtml:br/\u003e\n                                 \u003cxhtml:br/\u003e// verify that content type is multipart form data\u003cxhtml:br/\u003eif (contentType != null \u0026amp;\u0026amp; contentType.indexOf(\"multipart/form-data\") != -1) {\u003cxhtml:br/\u003e\n                                 \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                                    \u003cxhtml:div\u003e// extract the filename from the Http header\u003cxhtml:br/\u003eBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003epLine = br.readLine();\u003cxhtml:br/\u003eString filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003e\n                                       \u003cxhtml:br/\u003e// output the file to the local upload directory\u003cxhtml:br/\u003etry {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                                          \u003cxhtml:div\u003eBufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));\u003cxhtml:br/\u003efor (String line; (line=br.readLine())!=null; ) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eif (line.indexOf(boundary) == -1) {\u003cxhtml:div style=\"margin-left:10px;\"\u003ebw.write(line);\u003cxhtml:br/\u003ebw.newLine();\u003cxhtml:br/\u003ebw.flush();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e} //end of for loop\u003cxhtml:br/\u003ebw.close();\u003c/xhtml:div\u003e\n                                       \u003c/xhtml:div\u003e\n                                       \u003cxhtml:br/\u003e\n                                       \u003cxhtml:br/\u003e} catch (IOException ex) {...}\u003cxhtml:br/\u003e// output successful upload response HTML page\u003c/xhtml:div\u003e\n                                 \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e// output unsuccessful upload response HTML page\u003cxhtml:br/\u003eelse\u003cxhtml:br/\u003e{...}\u003c/xhtml:div\u003e\n                           \u003c/xhtml:div\u003e}\u003cxhtml:div style=\"margin-left:10px;\"\u003e...\u003c/xhtml:div\u003e\n                        \u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThis code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eAdditionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.\u003c/Body_Text\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2021-21972",
      "description": "Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21972"
    },
    {
      "reference": "CVE-2020-3452",
      "description": "Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3452"
    },
    {
      "reference": "CVE-2010-0467",
      "description": "Newsletter module allows reading arbitrary files using \"../\" sequences.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0467"
    },
    {
      "reference": "CVE-2009-4194",
      "description": "FTP server allows deletion of arbitrary files using \"..\" in the DELE command.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4194"
    },
    {
      "reference": "CVE-2009-4053",
      "description": "FTP server allows creation of arbitrary directories using \"..\" in the MKD command.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4053"
    },
    {
      "reference": "CVE-2009-0244",
      "description": "FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0244"
    },
    {
      "reference": "CVE-2009-4013",
      "description": "Software package maintenance program allows overwriting arbitrary files using \"../\" sequences.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4013"
    },
    {
      "reference": "CVE-2009-4449",
      "description": "Bulletin board allows attackers to determine the existence of files using the avatar.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4449"
    },
    {
      "reference": "CVE-2009-4581",
      "description": "PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4581"
    },
    {
      "reference": "CVE-2010-0012",
      "description": "Overwrite of files using a .. in a Torrent file.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0012"
    },
    {
      "reference": "CVE-2010-0013",
      "description": "Chat program allows overwriting files using a custom smiley request.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0013"
    },
    {
      "reference": "CVE-2008-5748",
      "description": "Chain: external control of values for user's desired language and theme enables path traversal.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5748"
    },
    {
      "reference": "CVE-2009-1936",
      "description": "Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1936"
    }
  ],
  "references": [
    {
      "section": "Chapter 11, \"Directory Traversal and Using Parent Paths (..)\" Page 370",
      "reference_id": "REF-7",
      "author": [
        "Michael Howard",
        "David LeBlanc"
      ],
      "title": "Writing Secure Code",
      "url": "https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223",
      "publication_year": "2002",
      "publication_month": "--12",
      "publication_day": "---04",
      "publisher": "Microsoft Press",
      "edition": "2nd Edition"
    },
    {
      "reference_id": "REF-45",
      "author": [
        "OWASP"
      ],
      "title": "OWASP Enterprise Security API (ESAPI) Project",
      "url": "http://www.owasp.org/index.php/ESAPI"
    },
    {
      "reference_id": "REF-185",
      "author": [
        "OWASP"
      ],
      "title": "Testing for Path Traversal (OWASP-AZ-001)",
      "url": "http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)"
    },
    {
      "reference_id": "REF-186",
      "author": [
        "Johannes Ullrich"
      ],
      "title": "Top 25 Series - Rank 7 - Path Traversal",
      "url": "http://blogs.sans.org/appsecstreetfighter/2010/03/09/top-25-series-rank-7-path-traversal/",
      "publication_year": "2010",
      "publication_month": "--03",
      "publication_day": "---09",
      "publisher": "SANS Software Security Institute"
    },
    {
      "reference_id": "REF-76",
      "author": [
        "Sean Barnum",
        "Michael Gegick"
      ],
      "title": "Least Privilege",
      "url": "https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html",
      "publication_year": "2005",
      "publication_month": "--09",
      "publication_day": "---14"
    },
    {
      "section": "Chapter 9, \"Filenames and Paths\", Page 503",
      "reference_id": "REF-62",
      "author": [
        "Mark Dowd",
        "John McDonald",
        "Justin Schuh"
      ],
      "title": "The Art of Software Security Assessment",
      "publication_year": "2006",
      "publisher": "Addison Wesley",
      "edition": "1st Edition"
    },
    {
      "section": "ASCSM-CWE-22",
      "reference_id": "REF-962",
      "author": [
        "Object Management Group (OMG)"
      ],
      "title": "Automated Source Code Security Measure (ASCSM)",
      "url": "http://www.omg.org/spec/ASCSM/1.0/",
      "publication_year": "2016",
      "publication_month": "--01"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_organization": "Veracode",
        "modification_date": "2008-08-15T00:00:00Z",
        "modification_comment": "Suggested OWASP Top Ten 2004 mapping"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-07-27T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16T00:00:00Z",
        "modification_comment": "updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-06-21T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-09-27T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-12-13T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-10-30T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-02-21T00:00:00Z",
        "modification_comment": "updated Observed_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2013-07-17T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23T00:00:00Z",
        "modification_comment": "updated Other_Notes, Research_Gaps"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Detection_Factors, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2015-12-07T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-05-03T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2018-03-27T00:00:00Z",
        "modification_comment": "updated References, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns, Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-09-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-08-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-12-10T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-03-15T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-07-20T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2021-10-28T00:00:00Z",
        "modification_comment": "updated Observed_Examples, Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2022-06-28T00:00:00Z",
        "modification_comment": "updated Observed_Examples, Relationships"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Path Traversal",
        "date": "2010-02-16T00:00:00Z"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    },
    {
      "ordinality": "Resultant"
    }
  ],
  "alternate_terms": [
    {
      "term": "Directory traversal"
    },
    {
      "term": "Path traversal",
      "description": "\"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused."
    }
  ],
  "detection_methods": [
    {
      "method": "Automated Static Analysis",
      "description": "Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the software's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.",
      "effectiveness": "High"
    },
    {
      "method": "Manual Static Analysis",
      "description": "Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.",
      "effectiveness": "High"
    },
    {
      "method": "Automated Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBytecode Weakness Analysis - including disassembler + source code weakness analysis\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBinary Weakness Analysis - including disassembler + source code weakness analysis\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Manual Static Analysis - Binary or Bytecode",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eBinary / Bytecode disassembler - then use manual analysis for vulnerabilities \u0026amp; anomalies\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "SOAR Partial"
    },
    {
      "method": "Dynamic Analysis with Automated Results Interpretation",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eWeb Application Scanner\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eWeb Services Scanner\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eDatabase Scanners\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Dynamic Analysis with Manual Results Interpretation",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFuzz Tester\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eFramework-based Fuzzer\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Manual Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eManual Source Code Review (not inspections)\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFocused Manual Spotcheck - Focused manual analysis of source\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Automated Static Analysis - Source Code",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eSource code Weakness Analyzer\u003c/xhtml:li\u003e\n                           \u003cxhtml:li\u003eContext-configured Source Code Weakness Analyzer\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    },
    {
      "method": "Architecture or Design Review",
      "description": "\n                  \u003cxhtml:p\u003eAccording to SOAR, the following detection techniques may be useful:\u003c/xhtml:p\u003e\n                  \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                     \u003cxhtml:div\u003eHighly cost effective:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eFormal Methods / Correct-By-Construction\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                     \u003cxhtml:div\u003eCost effective for partial coverage:\u003c/xhtml:div\u003e\n                     \u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:ul\u003e\n                           \u003cxhtml:li\u003eInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\u003c/xhtml:li\u003e\n                        \u003c/xhtml:ul\u003e\n                     \u003c/xhtml:div\u003e\n                  \u003c/xhtml:div\u003e\n               ",
      "effectiveness": "High"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Path Traversal"
    },
    {
      "taxonomy_name": "OWASP Top Ten 2007",
      "entry_name": "Insecure Direct Object Reference",
      "entry_id": "A4",
      "mapping_fit": "CWE More Specific"
    },
    {
      "taxonomy_name": "OWASP Top Ten 2004",
      "entry_name": "Broken Access Control",
      "entry_id": "A2",
      "mapping_fit": "CWE More Specific"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Canonicalize path names originating from untrusted sources",
      "entry_id": "FIO02-C"
    },
    {
      "taxonomy_name": "SEI CERT Perl Coding Standard",
      "entry_name": "Canonicalize path names before validating them",
      "entry_id": "IDS00-PL",
      "mapping_fit": "Exact"
    },
    {
      "taxonomy_name": "WASC",
      "entry_name": "Path Traversal",
      "entry_id": "33"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Path Traversal",
      "entry_id": "SFP16"
    },
    {
      "taxonomy_name": "OMG ASCSM",
      "entry_id": "ASCSM-CWE-22"
    }
  ],
  "related_attack_patterns": [
    "126",
    "64",
    "76",
    "78",
    "79"
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "Pathname equivalence can be regarded as a type of canonicalization error."
    },
    {
      "type": "Relationship",
      "text": "Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not)."
    },
    {
      "type": "Terminology",
      "text": "\n               \u003cxhtml:p\u003eLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\u003c/xhtml:p\u003e\n               \u003cxhtml:p\u003eOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\u003c/xhtml:p\u003e\n            "
    },
    {
      "type": "Research Gap",
      "text": "Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap."
    },
    {
      "type": "Research Gap",
      "text": "\n               \u003cxhtml:p\u003eIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\u003c/xhtml:p\u003e\n               \u003cxhtml:p\u003eAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\u003c/xhtml:p\u003e\n            "
    }
  ],
  "affected_resources": [
    "File or Directory"
  ],
  "functional_areas": [
    "File Processing"
  ]
}
