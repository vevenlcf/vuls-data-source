{
  "id": "180",
  "name": "Incorrect Behavior Order: Validate Before Canonicalize",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step.",
  "extended_description": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "179",
      "view_id": "1000",
      "ordinal": "Primary"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "class": "Language-Independent",
        "prevalence": "Undetermined"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "common_consequences": [
    {
      "scope": [
        "Access Control"
      ],
      "impact": [
        "Bypass Protection Mechanism"
      ]
    }
  ],
  "potential_mitigations": [
    {
      "mitigation_id": "MIT-20",
      "phase": [
        "Implementation"
      ],
      "description": [
        "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
      ],
      "strategy": "Input Validation"
    }
  ],
  "demonstrative_examples": [
    {
      "demonstrative_example_id": "DX-35",
      "text": "\n               \u003cIntro_Text\u003eThe following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\".\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString path = getInputPath();\u003cxhtml:br/\u003eif (path.startsWith(\"/safe_dir/\"))\u003cxhtml:br/\u003e{\u003cxhtml:div style=\"margin-left:10px;\"\u003eFile f = new File(path);\u003cxhtml:br/\u003ereturn f.getCanonicalPath();\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eThe problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\".\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eTo avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"Java\"\u003e\n                  \u003cxhtml:div\u003eString path = getInputPath();\u003cxhtml:br/\u003eFile f = new File(path);\u003cxhtml:br/\u003eif (f.getCanonicalPath().startsWith(\"/safe_dir/\"))\u003cxhtml:br/\u003e{\u003cxhtml:div style=\"margin-left:10px;\"\u003ereturn f.getCanonicalPath();\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003e\n                  \u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    }
  ],
  "observed_examples": [
    {
      "reference": "CVE-2002-0433",
      "description": "Product allows remote attackers to view restricted files via an HTTP request containing a \"*\" (wildcard or asterisk) character.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
    },
    {
      "reference": "CVE-2003-0332",
      "description": "Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0332"
    },
    {
      "reference": "CVE-2002-0802",
      "description": "Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0802"
    },
    {
      "reference": "CVE-2000-0191",
      "description": "Overlaps \"fakechild/../realchild\"",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0191"
    },
    {
      "reference": "CVE-2004-2363",
      "description": "Product checks URI for \"\u003c\" and other literal characters, but does it before hex decoding the URI, so \"%3E\" and other sequences are allowed.",
      "link": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2363"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "PLOVER",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations, Time_of_Introduction"
      },
      {
        "modification_organization": "Veracode",
        "modification_date": "2008-08-15T00:00:00Z",
        "modification_comment": "Suggested OWASP Top Ten 2004 mapping"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Relationships, Other_Notes, Taxonomy_Mappings, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-10-14T00:00:00Z",
        "modification_comment": "updated Description"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-05-27T00:00:00Z",
        "modification_comment": "updated Other_Notes, Relationship_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-03-29T00:00:00Z",
        "modification_comment": "updated Potential_Mitigations"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-01-19T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Functional_Areas"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-06-20T00:00:00Z",
        "modification_comment": "updated Related_Attack_Patterns"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated Relationships, Type"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-06-25T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Potential_Mitigations"
      }
    ],
    "previous_entry_name": [
      {
        "text": "Validate-Before-Canonicalize",
        "date": "2008-04-11T00:00:00Z"
      }
    ]
  },
  "taxonomy_mappings": [
    {
      "taxonomy_name": "PLOVER",
      "entry_name": "Validate-Before-Canonicalize"
    },
    {
      "taxonomy_name": "OWASP Top Ten 2004",
      "entry_name": "Unvalidated Input",
      "entry_id": "A1",
      "mapping_fit": "CWE More Specific"
    },
    {
      "taxonomy_name": "The CERT Oracle Secure Coding Standard for Java (2011)",
      "entry_name": "Normalize strings before validating them",
      "entry_id": "IDS01-J",
      "mapping_fit": "Exact"
    },
    {
      "taxonomy_name": "SEI CERT Oracle Coding Standard for Java",
      "entry_name": "Normalize strings before validating them",
      "entry_id": "IDS01-J",
      "mapping_fit": "Exact"
    }
  ],
  "related_attack_patterns": [
    "267",
    "3",
    "71",
    "78",
    "79",
    "80"
  ],
  "notes": [
    {
      "type": "Relationship",
      "text": "This overlaps other categories."
    }
  ]
}
