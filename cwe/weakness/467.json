{
  "id": "467",
  "name": "Use of sizeof() on a Pointer Type",
  "abstraction": "Variant",
  "structure": "Simple",
  "status": "Draft",
  "description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",
  "extended_description": "The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.",
  "related_weaknesses": [
    {
      "nature": "ChildOf",
      "cweid": "682",
      "view_id": "1000",
      "ordinal": "Primary"
    },
    {
      "nature": "CanPrecede",
      "cweid": "131",
      "view_id": "1000"
    }
  ],
  "applicable_platforms": {
    "language": [
      {
        "prevalence": "Undetermined",
        "name": "C"
      },
      {
        "prevalence": "Undetermined",
        "name": "C++"
      }
    ]
  },
  "modes_of_introduction": [
    {
      "phase": "Implementation"
    }
  ],
  "likelihood_of_exploit": "High",
  "common_consequences": [
    {
      "scope": [
        "Integrity",
        "Confidentiality"
      ],
      "impact": [
        "Modify Memory",
        "Read Memory"
      ],
      "note": "This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows."
    }
  ],
  "potential_mitigations": [
    {
      "phase": [
        "Implementation"
      ],
      "description": [
        "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack."
      ]
    }
  ],
  "demonstrative_examples": [
    {
      "text": "\n               \u003cIntro_Text\u003eCare should be taken to ensure sizeof returns the size of the data structure itself, and not the size of the pointer to the data structure.\u003c/Intro_Text\u003e\n               \u003cBody_Text\u003eIn this example, sizeof(foo) returns the size of the pointer.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"bad\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003edouble *foo;\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003efoo = (double *)malloc(sizeof(foo));\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eIn this example, sizeof(*foo) returns the size of the data structure and not the size of the pointer.\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"good\" Language=\"C\"\u003e\n                  \u003cxhtml:div\u003edouble *foo;\u003cxhtml:br/\u003e...\u003cxhtml:br/\u003efoo = (double *)malloc(sizeof(*foo));\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n            "
    },
    {
      "text": "\n               \u003cIntro_Text\u003eThis example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.\u003c/Intro_Text\u003e\n               \u003cExample_Code Nature=\"bad\"\u003e\n                  \u003cxhtml:div\u003e\n                     \u003cxhtml:br/\u003e\n                     \u003cxhtml:i\u003e/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */\u003c/xhtml:i\u003e\n                     \u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003echar *username = \"admin\";\u003cxhtml:br/\u003echar *pass = \"password\";\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eint AuthenticateUser(char *inUser, char *inPass) {\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eprintf(\"Sizeof username = %d\\n\", sizeof(username));\u003cxhtml:br/\u003eprintf(\"Sizeof pass = %d\\n\", sizeof(pass));\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (strncmp(username, inUser, sizeof(username))) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Auth failure of username using sizeof\\n\");\u003cxhtml:br/\u003ereturn(AUTH_FAIL);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                           \u003cxhtml:i\u003e/* Because of CWE-467, the sizeof returns 4 on many platforms and architectures. */\u003c/xhtml:i\u003e\n                           \u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (! strncmp(pass, inPass, sizeof(pass))) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Auth success of password using sizeof\\n\");\u003cxhtml:br/\u003ereturn(AUTH_SUCCESS);\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eprintf(\"Auth fail of password using sizeof\\n\");\u003cxhtml:br/\u003ereturn(AUTH_FAIL);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003cxhtml:br/\u003e\n                     \u003cxhtml:br/\u003eint main (int argc, char **argv)\u003cxhtml:br/\u003e{\u003cxhtml:div style=\"margin-left:10px;\"\u003e\n                        \u003cxhtml:div\u003eint authResult;\u003cxhtml:br/\u003e\n                           \u003cxhtml:br/\u003eif (argc \u0026lt; 3) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eExitError(\"Usage: Provide a username and password\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eauthResult = AuthenticateUser(argv[1], argv[2]);\u003cxhtml:br/\u003eif (authResult != AUTH_SUCCESS) {\u003cxhtml:div style=\"margin-left:10px;\"\u003eExitError(\"Authentication failed\");\u003c/xhtml:div\u003e}\u003cxhtml:br/\u003eelse {\u003cxhtml:div style=\"margin-left:10px;\"\u003eDoAuthenticatedTask(argv[1]);\u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n                     \u003c/xhtml:div\u003e}\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eIn AuthenticateUser(), because sizeof() is applied to a parameter with an array type, the sizeof() call might return 4 on many modern architectures. As a result, the strncmp() call only checks the first four characters of the input password, resulting in a partial comparison (CWE-187), leading to improper authentication (CWE-287).\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eBecause of the partial comparison, any of these passwords would still cause authentication to succeed for the \"admin\" user:\u003c/Body_Text\u003e\n               \u003cExample_Code Nature=\"attack\"\u003e\n                  \u003cxhtml:div\u003epass5\u003cxhtml:br/\u003epassABCDEFGH\u003cxhtml:br/\u003epassWORD\u003c/xhtml:div\u003e\n               \u003c/Example_Code\u003e\n               \u003cBody_Text\u003eBecause only 4 characters are checked, this significantly reduces the search space for an attacker, making brute force attacks more feasible.\u003c/Body_Text\u003e\n               \u003cBody_Text\u003eThe same problem also applies to the username, so values such as \"adminXYZ\" and \"administrator\" will succeed for the username.\u003c/Body_Text\u003e\n            "
    }
  ],
  "references": [
    {
      "reference_id": "REF-18",
      "author": [
        "Secure Software, Inc."
      ],
      "title": "The CLASP Application Security Process",
      "url": "https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf",
      "publication_year": "2005"
    },
    {
      "reference_id": "REF-442",
      "author": [
        "Robert Seacord"
      ],
      "title": "EXP01-A. Do not take the sizeof a pointer to determine the size of a type",
      "url": "https://www.securecoding.cert.org/confluence/display/seccode/EXP01-A.+Do+not+take+the+sizeof+a+pointer+to+determine+the+size+of+a+type"
    }
  ],
  "content_history": {
    "submission": {
      "submission_name": "CLASP",
      "submission_date": "2006-07-19T00:00:00Z"
    },
    "modification": [
      {
        "modification_name": "Eric Dalci",
        "modification_organization": "Cigital",
        "modification_date": "2008-07-01T00:00:00Z",
        "modification_comment": "updated Time_of_Introduction"
      },
      {
        "modification_organization": "KDM Analytics",
        "modification_date": "2008-08-01T00:00:00Z",
        "modification_comment": "added/updated white box definitions"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-09-08T00:00:00Z",
        "modification_comment": "updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2008-11-24T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-03-10T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2009-12-28T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2010-02-16T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-01T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-06-27T00:00:00Z",
        "modification_comment": "updated Common_Consequences"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2011-09-13T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2012-05-11T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-06-23T00:00:00Z",
        "modification_comment": "updated Description, Other_Notes"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2014-07-30T00:00:00Z",
        "modification_comment": "updated Relationships, Taxonomy_Mappings"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2017-11-08T00:00:00Z",
        "modification_comment": "updated Demonstrative_Examples, Taxonomy_Mappings, White_Box_Definitions"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2019-01-03T00:00:00Z",
        "modification_comment": "updated Relationships"
      },
      {
        "modification_name": "CWE Content Team",
        "modification_organization": "MITRE",
        "modification_date": "2020-02-24T00:00:00Z",
        "modification_comment": "updated References"
      }
    ]
  },
  "weakness_ordinalities": [
    {
      "ordinality": "Primary"
    }
  ],
  "taxonomy_mappings": [
    {
      "taxonomy_name": "CLASP",
      "entry_name": "Use of sizeof() on a pointer type"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Do not apply the sizeof operator to a pointer when taking the size of an array",
      "entry_id": "ARR01-C"
    },
    {
      "taxonomy_name": "CERT C Secure Coding",
      "entry_name": "Allocate sufficient memory for an object",
      "entry_id": "MEM35-C",
      "mapping_fit": "CWE More Abstract"
    },
    {
      "taxonomy_name": "Software Fault Patterns",
      "entry_name": "Incorrect Buffer Length Computation",
      "entry_id": "SFP10"
    }
  ]
}
